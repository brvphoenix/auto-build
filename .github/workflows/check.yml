name: CI

on:
  push:
    branches:
      - master
    tags-ignore:
      - v*
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build the Binary Files
    runs-on: ubuntu-latest
    env:
      DEBIAN_FRONTEND: noninteractive
      USE_CHOICE: x86_64
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@master
    - name: Install Dependencies
      run: |
        sudo -E apt-get update
        sudo -E apt-get -y install flex gawk git jq wget
    - name: Initialize Parameters
      run: |
        echo "::set-env name=USE_PROTOCOL::$(jq -r '.openwrt.USE_PROTOCOL' dynamic.json)"
        echo "::set-env name=USE_DOMAIN::$(jq -r '.openwrt.USE_DOMAIN' dynamic.json)"
        echo "::set-env name=USE_RELEASE::$(jq -r '.openwrt.USE_RELEASE' dynamic.json)"
        echo "::set-env name=USE_VERSION::$(jq -r '.openwrt.USE_VERSION' dynamic.json)"

        echo "::set-env name=USE_ARCH::${{env.USE_CHOICE}}"
        echo "::set-env name=USE_TARGET::$(jq -r '.openwrt["${{env.USE_CHOICE}}"].USE_TARGET' dynamic.json)"
        echo "::set-env name=USE_SUBTARGET::$(jq -r '.openwrt["${{env.USE_CHOICE}}"].USE_SUBTARGET' dynamic.json)"
        [ "$(jq -r '.openwrt["${{env.USE_CHOICE}}"].USE_EABI' dynamic.json)" = "null" ] && \
          echo "::set-env name=USE_GCC::$(jq -r '.openwrt["${{env.USE_CHOICE}}"].USE_GCC' dynamic.json)" || \
          echo "::set-env name=USE_GCC::$(jq -r '.openwrt["${{env.USE_CHOICE}}"].USE_GCC' dynamic.json)_eabi"
        [ "$(jq -r '.openwrt["${{env.USE_CHOICE}}"].USE_UNIQUE' dynamic.json)" = "null" ] && \
          USE_SDK="$(jq -r '.openwrt["${{env.USE_CHOICE}}"].USE_TARGET' dynamic.json)-$(jq -r '.openwrt["${{env.USE_CHOICE}}"].USE_SUBTARGET' dynamic.json)" || \
          USE_SDK="$(jq -r '.openwrt["${{env.USE_CHOICE}}"].USE_TARGET' dynamic.json)"
        echo "::set-env name=USE_SDK::${USE_SDK}"
    - name: Check Version
      id: check-version
      run: |
        [ "${{env.USE_RELEASE}}" = "releases" ] && {
          URL_FIX=${{env.USE_RELEASE}}/${{env.USE_VERSION}}
          SDK_FILE=openwrt-sdk-${{env.USE_VERSION}}-${{env.USE_SDK}}_${{env.USE_GCC}}.Linux-x86_64.tar.xz
        } || {
          URL_FIX=${{env.USE_RELEASE}}
          SDK_FILE=openwrt-sdk-${{env.USE_SDK}}_${{env.USE_GCC}}.Linux-x86_64.tar.xz
        }
        target_url=${{env.USE_PROTOCOL}}://${{env.USE_DOMAIN}}/${URL_FIX}/targets/${{env.USE_TARGET}}/${{env.USE_SUBTARGET}}
        curl -O "${target_url}/version.buildinfo"
        curl -O "${target_url}/feeds.buildinfo"
        [ -e "version.buildinfo" ] && version="$(echo $(cat version.buildinfo))" || version="${{ github.run_id }}"
        [ -e "feeds.buildinfo" ] && feeds="$(echo $(md5sum feeds.buildinfo | cut -d ' ' -f 1))" || feeds="${{ github.run_id }}"
        echo "::set-env name=target-url::${target_url}"
        echo "::set-env name=target-file::${SDK_FILE}"
        echo "::set-env name=target-version::${version}"
        echo "::set-env name=target-feeds::${feeds}"
    - name: Cache SDK
      uses: actions/cache@v2
      id: cache-sdk
      with:
        path: ./${{ env.target-file }}
        key: SDK-x86_64-${{ env.target-version }}
    - if: steps.cache-sdk.outputs.cache-hit != 'true'
      run: |
        wget --no-check-certificate ${{ env.target-url }}/${{ env.target-file }}
    - run: |
        tar -xJf ${{ env.target-file }}
        mv "$(find ./ -maxdepth 1 -type d -name 'openwrt-sdk*')" build
        rm -rf build/dl build/feeds
    - name: Clone Source
      uses: actions/checkout@v2
      with:
        ref: master
        repository: brvphoenix/SomePackages
        token: ${{ secrets.SUPER_TOKEN }}
        path: SomePackages

