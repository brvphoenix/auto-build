name: Auto-Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@master
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.SUPER_TOKEN }}
      run: |
        tag_name=$(basename ${{github.ref}})
        hub release create -d -t master -m "Release $tag_name" $tag_name
  build-matrix:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        link: [dynamic, static]
        ver: [x86_64, mips_24kc, mipsel_24kc, arm_cortex-a9, arm_cortex-a7_neon-vfpv4, arm_cortex-a9_vfpv3, arm_cortex-a15_neon-vfpv4, aarch64_generic]
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@master
    - name: Install Dependencies
      run: |
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential flex gawk gcc-multilib git libelf-dev libncurses5-dev \
                           libssl-dev python subversion zlib1g-dev autoconf automake libtool autopoint \
                           libclang-dev jq
    - name: Initialize Parameters
      run: |
        echo "::set-env name=USE_BRANCH::$(jq -r '.qbt.USE_BRANCH' ${{matrix.link}}.json)"
        echo "::set-env name=USE_ARCH::${{matrix.ver}}"
        echo "::set-env name=USE_PROTOCOL::$(jq -r '.openwrt.USE_PROTOCOL' ${{matrix.link}}.json)"
        echo "::set-env name=USE_DOMAIN::$(jq -r '.openwrt.USE_DOMAIN' ${{matrix.link}}.json)"
        echo "::set-env name=USE_RELEASE::$(jq -r '.openwrt.USE_RELEASE' ${{matrix.link}}.json)"
        echo "::set-env name=USE_VERSION::$(jq -r '.openwrt.USE_VERSION' ${{matrix.link}}.json)"
        echo "::set-env name=USE_TARGET::$(jq -r '.openwrt["${{matrix.ver}}"].USE_TARGET' ${{matrix.link}}.json)"
        echo "::set-env name=USE_SUBTARGET::$(jq -r '.openwrt["${{matrix.ver}}"].USE_SUBTARGET' ${{matrix.link}}.json)"
        [ "$(jq -r '.openwrt["${{matrix.ver}}"].USE_EABI' ${{matrix.link}}.json)" = "null" ] && \
          echo "::set-env name=USE_GCC::$(jq -r '.openwrt["${{matrix.ver}}"].USE_GCC' ${{matrix.link}}.json)" || \
          echo "::set-env name=USE_GCC::$(jq -r '.openwrt["${{matrix.ver}}"].USE_GCC' ${{matrix.link}}.json)_eabi"
        [ "$(jq -r '.openwrt["${{matrix.ver}}"].USE_UNIQUE' ${{matrix.link}}.json)" = "null" ] && \
          USE_SDK="$(jq -r '.openwrt["${{matrix.ver}}"].USE_TARGET' ${{matrix.link}}.json)-$(jq -r '.openwrt["${{matrix.ver}}"].USE_SUBTARGET' ${{matrix.link}}.json)" || \
          USE_SDK="$(jq -r '.openwrt["${{matrix.ver}}"].USE_TARGET' ${{matrix.link}}.json)"
        echo "::set-env name=USE_SDK::${USE_SDK}"
    - name: Check Version
      id: check-version
      run: |
        [ "${{env.USE_RELEASE}}" = "releases" ] && {
          URL_FIX=${{env.USE_RELEASE}}/${{env.USE_VERSION}}
          SDK_FILE=openwrt-sdk-${{env.USE_VERSION}}-${{env.USE_SDK}}_${{env.USE_GCC}}.Linux-x86_64.tar.xz
        } || {
          URL_FIX=${{env.USE_RELEASE}}
          SDK_FILE=openwrt-sdk-${{env.USE_SDK}}_${{env.USE_GCC}}.Linux-x86_64.tar.xz
        }
        target_url=${{env.USE_PROTOCOL}}://${{env.USE_DOMAIN}}/${URL_FIX}/targets/${{env.USE_TARGET}}/${{env.USE_SUBTARGET}}
        curl -O "${target_url}/version.buildinfo"
        curl -O "${target_url}/feeds.buildinfo"
        [ -e "version.buildinfo" ] && version="$(echo $(cat version.buildinfo))" || version="${{ github.run_id }}"
        [ -e "feeds.buildinfo" ] && feeds="$(echo $(md5sum feeds.buildinfo | cut -d ' ' -f 1))" || feeds="${{ github.run_id }}"
        echo "::set-env name=target-url::${target_url}"
        echo "::set-env name=target-file::${SDK_FILE}"
        echo "::set-env name=target-version::${version}"
        echo "::set-env name=target-feeds::${feeds}"
    - name: Cache SDK
      uses: actions/cache@v2
      id: cache-sdk
      with:
        path: ./${{ env.target-file }}
        key: SDK-${{ matrix.ver }}-${{ env.target-version }}
    - if: steps.cache-sdk.outputs.cache-hit != 'true'
      run: |
        wget --no-check-certificate ${{ env.target-url }}/${{ env.target-file }}
    - run: |
        tar -xJf ${{ env.target-file }}
        mv "$(find ./ -maxdepth 1 -type d -name 'openwrt-sdk*')" build
        rm -rf build/dl build/feeds
    - name: Cache Source
      uses: actions/cache@v2
      with:
        path: |
          build/dl
          build/feeds
        key: source-${{ env.target-feeds }}
        restore-keys: |
          source-test-
    - name: Clone Source
      uses: actions/checkout@master
      with:
        ref: ${{env.USE_BRANCH}}
        repository: brvphoenix/SomePackages
        token: ${{ secrets.SUPER_TOKEN }}
        path: SomePackages
    - name: Build the Binary Files
      run: |
        chmod 755 generate.sh
        ./generate.sh ${{env.USE_TARGET}} ${{env.USE_SUBTARGET}} ${{env.USE_ARCH}} ${{matrix.link}}
    - name: Upload the Logs
      uses: actions/upload-artifact@master
      with:
        name: ${{env.USE_ARCH}}-${{matrix.link}}-log
        path: ./${{env.USE_ARCH}}-${{matrix.link}}.log.tar.xz
    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.SUPER_TOKEN }}
      run: |
        [ -n "$(find ${USE_ARCH}-${{matrix.link}} -type f -iname *qbittorrent*)" ] || exit 1
        tag_name=$(basename ${{github.ref}})
        hub release edit $tag_name -a ./${{env.USE_ARCH}}-${{matrix.link}}.tar.xz -m ""
  pre-release:
    needs: build-matrix
    runs-on: ubuntu-latest
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@master
    - name: Edit Release Status
      env:
        GITHUB_TOKEN: ${{ secrets.SUPER_TOKEN }}
      run: |
        tag_name=$(basename ${{github.ref}})
        hub release edit $tag_name -p --draft=false -m ""

