name: Build_qBT_mips_24kc

on:
  release:
    types: [created]

jobs:
  build:
    name: Build the Binary Files
    runs-on: ubuntu-18.04
    env:
      DEBIAN_FRONTEND: noninteractive
      USE_CHOICE: target1
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@master
    - name: Install Dependencies
      run: |
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential flex gawk gcc-multilib git libelf-dev libncurses5-dev \
                           libssl-dev python subversion zlib1g-dev autoconf automake libtool autopoint jqs
    - name: Initialize Parameters
      run:
        echo "::set-env name=RELEASE_ID::$(jq --raw-output '.release.id' $GITHUB_EVENT_PATH)"

        echo "::set-env name=USE_PROTOCOL::$(jq --raw-output '.USE_PROTOCOL' target.json)"
        echo "::set-env name=USE_DOMAIN::$(jq --raw-output '.USE_DOMAIN' target.json)"
        echo "::set-env name=USE_RELEASE::$(jq --raw-output '.USE_RELEASE' target.json)"
        echo "::set-env name=USE_VERSION::$(jq --raw-output '.USE_VERSION' target.json)"

        echo "::set-env name=USE_ARCH::$(jq --raw-output '.${{env.USE_CHOICE}}.USE_ARCH' target.json)"
        echo "::set-env name=USE_TARGET::$(jq --raw-output '.${{env.USE_CHOICE}}.USE_TARGET' target.json)"
        echo "::set-env name=USE_SUBTARGET::$(jq --raw-output '.${{env.USE_CHOICE}}.USE_SUBTARGET' target.json)"
        [ "$(jq --raw-output '.${{env.USE_CHOICE}}.USE_EABI' target.json)" = "null" ] && \
          echo "::set-env name=USE_GCC::$(jq --raw-output '.USE_GCC' target.json)" || \
          echo "::set-env name=USE_GCC::$(jq --raw-output '.USE_GCC' target.json)_eabi"
        [ "$(jq --raw-output '.${{env.USE_CHOICE}}.USE_UNIQUE' target.json)" = "null" ] && \
          USE_SDK="$(jq --raw-output '.${{env.USE_CHOICE}}.USE_TARGET' target.json)-$(jq --raw-output '.${{env.USE_CHOICE}}.USE_SUBTARGET' target.json)" || \
          USE_SDK="$(jq --raw-output '.${{env.USE_CHOICE}}.USE_TARGET' target.json)"
        echo "::set-env name=USE_SDK::${USE_SDK}"
    - name: Download the SDK
      run: |
        wget --no-check-certificate ${{env.USE_PROTOCOL}}://${{env.USE_DOMAIN}}/${{env.USE_RELEASE}}/${{env.USE_VERSION}}/targets/${{env.USE_TARGET}}/\
        ${{env.USE_SUBTARGET}}/openwrt-sdk-${{env.USE_VERSION}}-${{env.USE_SDK}}_${{env.USE_GCC}}.Linux-x86_64.tar.xz

        tar -xJvf *.tar.xz && rm -f *.tar.xz
        mv openwrt-sdk* build
    - name: Clone Source
      uses: actions/checkout@v2
      with:
        repository: brvphoenix/SomePackages
        token: ${{ secrets.SUPER_TOKEN }}
        path: SomePackages
    - name: Build the Binary Files
      run: |
        chmod 755 generate.sh
        ./generate.sh ${{env.USE_TARGET}} ${{env.USE_SUBTARGET}} ${{env.USE_ARCH}}
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.SUPER_TOKEN }}
      with:
        upload_url: https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${{ env.RELEASE_ID }}/assets{?name,label}
        asset_path: ./${{env.USE_ARCH}}-static.tar.xz
        asset_name: ${{env.USE_ARCH}}-static.tar.xz
        asset_content_type: application/zip

