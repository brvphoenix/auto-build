name: CI

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v2
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.SUPER_TOKEN }}
      run: |
        tag_name=$(basename ${{github.ref}})
        hub release create -d -t master -m "Release $tag_name" $tag_name
  build-matrix:
    name: ${{matrix.link}}, ${{matrix.arch}}, qt${{matrix.qt}}, libtorrent_${{matrix.libtorrent}}
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [mips_24kc, mipsel_24kc, arm_cortex-a9, arm_cortex-a7_neon-vfpv4, arm_cortex-a9_vfpv3, arm_cortex-a15_neon-vfpv4, aarch64_cortex-a53, x86_64]
        link: [dynamic, static]
        libtorrent: [1_2, 2_0]
        qt: [5, 6]
        runtime_test: [false, true]
        exclude:
          - {arch: mips_24kc, runtime_test: true}
          - {arch: mipsel_24kc, runtime_test: true}
          - {arch: arm_cortex-a9, runtime_test: true}
          - {arch: arm_cortex-a7_neon-vfpv4, runtime_test: true}
          - {arch: arm_cortex-a9_vfpv3, runtime_test: true}
          - {arch: arm_cortex-a15_neon-vfpv4, runtime_test: false}
          - {arch: aarch64_cortex-a53, runtime_test: false}
          - {arch: x86_64, runtime_test: false}
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v2
      with:
        path: auto-build
    - name: Install Dependencies
      run: |
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential curl flex gawk git jq libelf-dev libncurses5-dev \
                           libssl-dev python python3 subversion time unzip wget xz-utils zlib1g-dev
    - name: Initialize Environment
      run: |
        JSON_FILE=auto-build/${{matrix.link}}.json
        USE_BRANCH=$(jq -r .qbt.USE_BRANCH ${JSON_FILE})
        vars="USE_PROTOCOL USE_DOMAIN USE_RELEASE USE_VERSION"
        for i in $vars; do
          eval "${i}=$(jq -r .openwrt.${i} ${JSON_FILE})"
        done

        vars="USE_GCC USE_LIBC USE_TARGET USE_SUBTARGET USE_UNIQUE USE_EABI"
        for i in $vars; do
          eval "${i}=$(jq -r .openwrt[\"${{matrix.arch}}\"].${i} ${JSON_FILE})"
        done

        USE_SOURCE_URL=${USE_PROTOCOL}://${USE_DOMAIN}/${USE_RELEASE}
        SDK_FILE=openwrt-sdk

        [ "${USE_RELEASE}" = "releases" ] && {
          USE_SOURCE_URL=${USE_SOURCE_URL}/${USE_VERSION}
          SDK_FILE=${SDK_FILE}-${USE_VERSION}
        }

        SDK_FILE=${SDK_FILE}-${USE_TARGET}
        [ "${USE_UNIQUE}" = "1" ] || SDK_FILE="${SDK_FILE}-${USE_SUBTARGET}"

        SDK_FILE=${SDK_FILE}_gcc-${USE_GCC}_$( [ "${USE_LIBC}" = "null" ] && echo musl || echo ${USE_LIBC} )
        [ "${USE_EABI}" = "1" ] && SDK_FILE="${SDK_FILE}_eabi"

        SDK_FILE=${SDK_FILE}.Linux-x86_64.tar.xz
        USE_SOURCE_URL=${USE_SOURCE_URL}/targets/${USE_TARGET}/${USE_SUBTARGET}

        echo "USE_BRANCH=${USE_BRANCH}" >> $GITHUB_ENV
        echo "USE_LIBC=${USE_LIBC}" >> $GITHUB_ENV
        echo "USE_TARGET=${USE_TARGET}" >> $GITHUB_ENV
        echo "USE_SUBTARGET=${USE_SUBTARGET}" >> $GITHUB_ENV
        echo "USE_SOURCE_URL=${USE_SOURCE_URL}" >> $GITHUB_ENV
        echo "USE_SDK_FILE=${SDK_FILE}" >> $GITHUB_ENV
    - name: Check Version
      run: |
        curl -O "${{env.USE_SOURCE_URL}}/version.buildinfo"
        curl -O "${{env.USE_SOURCE_URL}}/feeds.buildinfo"
        [ -e "version.buildinfo" ] && version="$(echo $(cat version.buildinfo))" || version="${{ github.run_id }}"
        [ -e "feeds.buildinfo" ] && feeds="$(echo $(md5sum feeds.buildinfo | cut -d ' ' -f 1))" || feeds="${{ github.run_id }}"
        echo "USE_SDK_VERSION=${version}" >> $GITHUB_ENV
        echo "USE_FEEDS_VERSION=${feeds}" >> $GITHUB_ENV
    - name: Cache SDK
      uses: actions/cache@v2
      id: cache-sdk
      with:
        path: ./${{ env.USE_SDK_FILE }}
        key: SDK-${{ matrix.arch }}-${{env.USE_TARGET}}-${{env.USE_SUBTARGET}}-${{ env.USE_SDK_VERSION }}
    - if: steps.cache-sdk.outputs.cache-hit != 'true'
      run: |
        wget --no-check-certificate ${{ env.USE_SOURCE_URL }}/${{ env.USE_SDK_FILE }}
    - run: |
        tar -xJf ${{ env.USE_SDK_FILE }}
        find ./ -maxdepth 1 -type d -iname 'openwrt-sdk*' -exec mv {} build \;
        rm -rf build/dl build/feeds
    - name: Cache feeds and downloaded source files
      uses: actions/cache@v2
      with:
        path: |
          build/dl
          build/feeds
        key: source-${{matrix.link}}-${{ env.USE_FEEDS_VERSION }}
        restore-keys: |
          source-${{matrix.link}}-
          source-
    - name: Clone qbt
      uses: actions/checkout@v2
      with:
        ref: ${{env.USE_BRANCH}}
        repository: brvphoenix/SomePackages
        token: ${{ secrets.SUPER_TOKEN }}
        path: SomePackages
    - name: Build the Binary Files
      working-directory: ./build
      run: |
        # Restore the modified feeds sources
        for d in $([ -d feeds ] && ls feeds | cut -d . -f 1 | sort | uniq); do
        	cd feeds/$d;
        	git checkout .;
        	cd ../..;
        done

        mkdir -p package
        cp -r ../SomePackages/qbittorrent/luci-app-qbittorrent package
        cp -r ../SomePackages/qbittorrent/qt${{matrix.qt}}/* package
        # Use the libtorrent official latest commit
        # cp -r ../SomePackages/qbittorrent/libtorrent-rasterbar_${{matrix.libtorrent}}/* package
        cp -r ../auto-build/rsync/package/libtorrent-rasterbar_${{matrix.libtorrent}} package/libtorrent-rasterbar
        rm -r ../auto-build/rsync/package/libtorrent-rasterbar_*
        rsync -a ../auto-build/rsync/* ./

        # Compatible with libtorrent RC_1_2
        if [ "${{matrix.libtorrent}}" = "1_2" ] || [ "${{matrix.qt}}" = "5" ]; then
        	sed -i 's/\(target_link_libraries(qbt_app PUBLIC "\)/\1-liconv /g' package/qbittorrent/patches/0012-fix-static-compile.patch
        	sed -i 's/\(include \$(INCLUDE_DIR)\/cmake\.mk\)$/\1\ninclude \$(INCLUDE_DIR)\/nls\.mk/g' package/qbittorrent/Makefile
        fi
        # Make qmake compile in parallel (should be deleted when update to Qt6)
        mv ../auto-build/test.mk package/qtbase
        sed -i '/define Build\/Compile/i include ./test.mk' package/qtbase/Makefile

        # use the github source
        sed -i 's/git\.openwrt\.org\/openwrt\/openwrt/github\.com\/openwrt\/openwrt/g' ./feeds.conf.default
        sed -i 's/git\.openwrt\.org\/feed\/packages/github\.com\/openwrt\/packages/g' ./feeds.conf.default
        sed -i 's/git\.openwrt\.org\/project\/luci/github\.com\/openwrt\/luci/g' ./feeds.conf.default
        sed -i 's/git\.openwrt\.org\/feed\/telephony/github\.com\/openwrt\/telephony/g' ./feeds.conf.default

        # Use the stable release snapshot feeds sources (should upgrade if update the release version).
        [ "${{matrix.link}}" = "dynamic" ] && sed -i 's/\(\.git\)\^\w\+/\1\;openwrt-21.02/g' ./feeds.conf.default

        # Sync with the source
        ./scripts/feeds update -a
        rm -rf feeds/packages/libs/libtorrent-rasterbar

        ./scripts/feeds update -i
        ./scripts/feeds install -a

        cat > .config <<EOF
        # CONFIG_ALL_KMODS is not set
        # CONFIG_ALL is not set
        CONFIG_PACKAGE_luci-app-qbittorrent=y
        CONFIG_QBT_REMOVE_GUI_TR=y
        CONFIG_QBT_LANG-zh=y
        CONFIG_LUCI_LANG_zh_Hans=y
        EOF

        [ "${{matrix.link}}" = "static" ] && {
        	cat >> .config <<-EOF
        		CONFIG_PACKAGE_libpcre2-16=y
        		CONFIG_PACKAGE_boost=y
        		CONFIG_PACKAGE_boost-system=y
        		CONFIG_PACKAGE_libopenssl=y
        		CONFIG_QT${{matrix.qt}}_OPENSSL_LINKED=y
        		CONFIG_QT${{matrix.qt}}_STATIC=y
        		# CONFIG_QT${{matrix.qt}}_SYSTEM_DC is not set
        		CONFIG_QT${{matrix.qt}}_SYSTEM_PCRE2=y
        		CONFIG_QT${{matrix.qt}}_SYSTEM_ZLIB=y
        		CONFIG_QBT_STATIC_LINK=y
        	EOF

        	sed -i '/HOST_FPIC:=-fPIC/aFPIC:=-fPIC' rules.mk
        	sed -i 's/\(-DBUILD_SHARED_LIBS=\)ON/\1OFF/' feeds/packages/libs/pcre2/Makefile
        	sed -i '/(call BuildPackage,libpcre2)/i Package/libpcre2/install=true\nPackage/libpcre2-16/install=true\nPackage/libpcre2-32/install=true' feeds/packages/libs/pcre2/Makefile
        	sed -i 's/\(-DBUILD_SHARED_LIBS=\)ON/\1OFF/' package/libtorrent-rasterbar/Makefile
        	sed -i '/^define Package\/libtorrent-rasterbar$/{:a;N;/endef/!ba;s/\(endef\)/  BUILDONLY:=1\n\1/g}' package/libtorrent-rasterbar/Makefile
        }
        make defconfig
        make package/luci-app-qbittorrent/compile V=s -j$(nproc) BUILD_LOG=1
    - name: Pack all the flies
      if: always()
      run: |
        # The save path of the packages
        SAVE_PATH=${{matrix.arch}}-${{matrix.link}}-qt${{matrix.qt}}-libtorrent_${{matrix.libtorrent}}
        mkdir -p ${SAVE_PATH}

        if [ "${{matrix.link}}" = "static" ]; then
          find build/bin/packages -type f -iname *qbittorrent* -exec cp -f {} ${SAVE_PATH} \;
        else
          mkdir -p ${SAVE_PATH}/1 ${SAVE_PATH}/2
          find build/bin/packages -type f \( -iname libqt${{matrix.qt}}* -or -iname  *torrent*.ipk \) -exec cp -f {} ${SAVE_PATH}/1 \;
          find build/bin/packages -type f \( \
            -iname libopenssl1* -or \
            -iname boost_* -or \
            -iname boost-system* -or \
            -iname libdouble-conversion* -or \
            -iname libpcre2-16* -or \
            -iname zlib_* \
          \) -exec cp -f {} ${SAVE_PATH}/2 \;
          find build/bin/targets -type f -iname libstdcpp* -exec cp -f {} ${SAVE_PATH}/2 \;

          # The libatomic is needed by mips_24kc and mipsel_24kc
          [ "${{matrix.arch}}" = "mips_24kc" ] || [ "${{matrix.arch}}" = "mipsel_24kc" ] && \
            find build/bin/targets -type f -iname libatomic* -exec cp -f {} ${SAVE_PATH}/2 \;

          # The libs is needed by glibc
          [ "${{env.USE_LIBC}}" = "glibc" ] && \
            find build/bin/targets -type f \( \
              -iname libc_* -or \
              -iname libpthread_* -or \
              -iname librt_* \
            \) -exec cp -f {} ${SAVE_PATH}/2 \;
        fi

        # Compress the pkgs
        tar -cJf ${SAVE_PATH}.tar.xz ${SAVE_PATH}

        cd build
        # Compress the log files
        XZ_OPT=-9 tar -cJvf ../${SAVE_PATH}.log.tar.xz logs

        # Clean up the obsolete packages
        scripts/dl_cleanup.py dl 2>&1 >/dev/null
        rm -rf dl/libtorrent-rasterbar-RC_${{matrix.libtorrent}}.tar.gz
    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.SUPER_TOKEN }}
      run: |
        [ -n "$(find ${{matrix.arch}}-${{matrix.link}}-qt${{matrix.qt}}-libtorrent_${{matrix.libtorrent}} -type f -iname *qbittorrent*)" ] || exit 1
        tag_name=$(basename ${{github.ref}})
        cd auto-build
        hub release edit $tag_name -a ../${{matrix.arch}}-${{matrix.link}}-qt${{matrix.qt}}-libtorrent_${{matrix.libtorrent}}.tar.xz -m ""
    - name: Register QEMU
      if: ${{ matrix.runtime_test }}
      run: |
        sudo docker run --rm --privileged aptman/qus -s -- -p
    - name: Build Docker container
      if: ${{ matrix.runtime_test }}
      run: |
        sudo docker build -t test-container --build-arg ARCH=${{ matrix.arch }} --build-arg BRANCH=21.02.0 ./auto-build/docker
    - name: Test via Docker container
      if: ${{ matrix.runtime_test }}
      run: |
        sudo docker run --rm -v $GITHUB_WORKSPACE/${{matrix.arch}}-${{matrix.link}}-qt${{matrix.qt}}-libtorrent_${{matrix.libtorrent}}:/ci  test-container ${{matrix.arch}}
    - name: Upload the Logs
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: ${{matrix.arch}}-${{matrix.link}}-qt${{matrix.qt}}-libtorrent_${{matrix.libtorrent}}-log
        path: ./${{matrix.arch}}-${{matrix.link}}-qt${{matrix.qt}}-libtorrent_${{matrix.libtorrent}}.log.tar.xz
        if-no-files-found: error
  pre-release:
    needs: [create-release, build-matrix]
    runs-on: ubuntu-latest
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v2
    - name: Edit Release Status
      env:
        GITHUB_TOKEN: ${{ secrets.SUPER_TOKEN }}
      run: |
        tag_name=$(basename ${{github.ref}})
        hub release edit $tag_name -p --draft=false -m ""
