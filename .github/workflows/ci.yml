name: CI

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      build:
        description: 'Building pkgs'
        required: true
        type: boolean
      type:
        description: 'Building type'
        required: true
        default: 'all'
        type: choice
        options:
        - dynamic
        - static
        - all
      arch:
        description: 'Architecture'
        required: true
        default: 'all'
        type: choice
        options:
        - aarch64
        - arm
        - x86
        - mips
        - all
      qt:
        description: 'QT version'
        required: true
        default: 'all'
        type: choice
        options:
        - 5
        - 6
        - all
      lt:
        description: 'libtorrent branch'
        required: true
        default: 'all'
        type: choice
        options:
        - 1.2
        - 2.0
        - all

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}-format("{0}-{1}-{2}-{3}", github.event.inputs.type, github.event.inputs.arch, github.event.inputs,qt, github.event.inputs.lt)
  cancel-in-progress: true

jobs:
  build-prep:
    runs-on: ubuntu-latest
    outputs:
      arch: ${{ steps.set-matrix.outputs.arch }}
      draft: ${{ steps.create-draft.outcome }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      pkg: ${{ steps.set-matrix.outputs.pkg }}
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        [ -n "$(command -v jq)" ] || {
        	sudo -E apt update
        	sudo -E apt -y install jq
        }
    - name: Format build matrix
      id: set-matrix
      run: |
        matrix='[]'
        for json_file in ./*.json; do
        	json_file_name=$(basename $json_file)
        	link=${json_file_name%.*}
        	[ -z "${{ github.event.inputs.type }}" ] || [ "${{ github.event.inputs.type }}" = "all" ] || [ "${{ github.event.inputs.type }}" = "${link}" ] || continue;
        	[ "$(jq -r '.openwrt.RUN_SKIP? // false' ${json_file})" = "false" ] || continue;
        	for arch in $(jq -r '.openwrt | to_entries[] | select((.value | type) == "object") | .key' ${json_file}); do
        		arch_wo_endian=${{ github.event.inputs.arch }}
        		arch_w_endian=$(echo $arch | cut -d '_' -f 1)
        		[ -z "${arch_wo_endian}" ] || [ "${arch_wo_endian}" = "all" ] || [ "${arch_wo_endian}" = "${arch_w_endian}" ] || [ "${arch_wo_endian}el" = "${arch_w_endian}" ] || [ "${arch_wo_endian}eb" = "${arch_w_endian}" ] || continue;
        		[ "$(jq -r '.openwrt."'$arch'".RUN_SKIP? // false' ${json_file})" = "false" ] || continue;
        		runtime_test=$(jq -r '.openwrt."'$arch'".RUNTIME_TEST? // false' ${json_file})
        		for libtorrent in $(jq -r '.qbittorrent.LIBTORRENT_VERSION? | to_entries[]? | .key?' ${json_file}); do
        			[ -z "${{ github.event.inputs.lt }}" ] || [ "${{ github.event.inputs.lt }}" = "all" ] || [ "${{ github.event.inputs.lt }}" = "${libtorrent/_/.}" ] || continue;
        			for qt in $(jq -r '.qbittorrent.QT_VERSION? | to_entries[]? | .key?' ${json_file}); do
        				[ -z "${{ github.event.inputs.qt }}" ] || [ "${{ github.event.inputs.qt }}" = "all" ] || [ "${{ github.event.inputs.qt }}" = "${qt}" ] || continue;
        				matrix="$(echo $matrix | jq -c '. += [{libtorrent:"'${libtorrent}'",qt:"'${qt}'",link:"'${link}'",arch:"'${arch}'",runtime_test:'${runtime_test}'}]')"
        			done
        		done
        	done
        done
        [ "${matrix}" != "[]" ] || exit 1
        arch="$(echo "${matrix}" | jq -c 'map({("arch"): .arch, ("link"): .link}) | unique')"
        pkg="$(echo "${matrix}" | jq -c 'map({("link"): .link, ("libtorrent"): .libtorrent, ("qt"): .qt, ("arch"): .arch}) | unique_by({link, qt, libtorrent})')"
        echo "matrix={\"include\":${matrix}}" >> $GITHUB_OUTPUT
        echo "arch={\"include\":${arch}}" >> $GITHUB_OUTPUT
        echo "pkg={\"include\":${pkg}}" >> $GITHUB_OUTPUT
    - name: Create draft
      id: create-draft
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        [ "$(hub release --include-drafts | grep "${GITHUB_REF_NAME}" | wc -l)" -eq 0 ] || hub release delete "${GITHUB_REF_NAME}"
        hub release create -d -t master -m "Release ${GITHUB_REF_NAME}" "${GITHUB_REF_NAME}"
  sdk-download:
    name: ${{ matrix.link }}, ${{ matrix.arch }}
    needs: build-prep
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-prep.outputs.arch) }}
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v3
      with:
        path: auto-build
        persist-credentials: false
    - name: Install Dependencies
      run: |
        [ -n "$(command -v jq)" ] && [ -n "$(command -v curl)" ] || {
        	sudo -E apt update
        	sudo -E apt -y install jq curl
        }
    - name: Initialize Environment
      id: init
      working-directory: ./auto-build
      run: |
        bash ./init_env.sh "${{ matrix.arch }}" "${{ matrix.link }}"
        cp $GITHUB_ENV init_env
    - name: Upload init Env
      uses: actions/upload-artifact@v3
      with:
        name: env-${{ matrix.arch }}-${{ matrix.link }}
        path: auto-build/init_env
    - name: Cache SDK
      uses: actions/cache@v3
      id: cache-sdk
      with:
        path: ./${{ env.USE_SDK_FILE }}
        key: ${{ matrix.link }}-${{ matrix.arch }}-${{ env.USE_SDK_VERSION }}
    - if: steps.cache-sdk.outputs.cache-hit != 'true'
      run: |
        curl -kLOZ --compressed ${{ env.USE_SOURCE_URL }}/${{ env.USE_SDK_FILE }}
        [ "$(sha256sum ${{ env.USE_SDK_FILE }} | cut -d ' ' -f1)" = "${{ env.USE_SDK_SHA256SUM }}" ] || exit 1;
  pkg-download:
    name: ${{ matrix.link }}, ${{ matrix.libtorrent }}, ${{ matrix.qt }}
    needs: [build-prep, sdk-download]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-prep.outputs.pkg) }}
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v3
      with:
        path: auto-build
        persist-credentials: false
    - name: Install Dependencies
      run: |
        [ -n "$(command -v jq)" ] && [ -n "$(command -v curl)" ] || {
        	sudo -E apt update
        	sudo -E apt -y install jq curl
        }
    - name: Download init Env
      id: arch-depended-env
      uses: actions/download-artifact@v3
      with:
        name: env-${{ matrix.arch }}-${{ matrix.link }}
    - name: Initialize Environment
      working-directory: ./auto-build
      env:
        SUPER_TOKEN: ${{ secrets.SUPER_TOKEN }}
        env_path: ${{ steps.arch-depended-env.outputs.download-path }}
      run: |
        if [ -f "${env_path}/init_env" ]; then
        	cat ${env_path}/init_env > $GITHUB_ENV
        else
        	bash ./init_env.sh "${{ matrix.arch }}" "${{ matrix.link }}"
        fi

        > ./env

        # QBT source and libtorrent source info
        JSON_FILE=./${{ matrix.link }}.json
        echo USE_QBT_REFS=$(jq -r '.qbittorrent.QT_VERSION?."${{ matrix.qt }}"' ${JSON_FILE}) >> ./env

        LIBT_REFS=$(jq -r '.qbittorrent.LIBTORRENT_VERSION?."${{ matrix.libtorrent }}" // empty' ${JSON_FILE})
        if [ -z "${LIBT_REFS}" -a -d "../auto-build/rsync/common/package/self/libtorrent-rasterbar_${{ matrix.libtorrent }}" ]; then
        	echo "USE_LIBT_LOCAL=true" >> ./env
        	echo USE_LIBT_HASH=$(git ls-remote ${GITHUB_SERVER_URL}/arvidn/libtorrent refs/heads/RC_${{ matrix.libtorrent }} | head -c 10) >> ./env
        else
        	echo "USE_LIBT_REFS=${LIBT_REFS}" >> ./env
        fi

        cat ./env >> $GITHUB_ENV
    - name: Cache SDK
      uses: actions/cache@v3
      id: cache-sdk
      with:
        path: ./${{ env.USE_SDK_FILE }}
        key: ${{ matrix.link }}-${{ matrix.arch }}-${{ env.USE_SDK_VERSION }}
    - if: steps.cache-sdk.outputs.cache-hit != 'true'
      run: |
        curl -kLOZ --compressed ${{ env.USE_SOURCE_URL }}/${{ env.USE_SDK_FILE }}
        [ "$(sha256sum ${{ env.USE_SDK_FILE }} | cut -d ' ' -f1)" = "${{ env.USE_SDK_SHA256SUM }}" ] || exit 1;
    - run: |
        mkdir -p build
        XZ_OPT='-T0' tar -xJf "${USE_SDK_FILE}" --strip-components=1 -C build
    - name: Cache feeds
      id: cache-feeds
      uses: actions/cache@v3
      with:
        path: |
          build/feeds/*
        key: feeds-${{ matrix.link }}-${{ env.USE_FEEDS_VERSION }}
        restore-keys: |
          feeds-${{ matrix.link }}-
          feeds-
    - name: Clone qbt
      if: ${{ steps.cache-qbt.outputs.cache-hit != 'true' }}
      uses: actions/checkout@v3
      with:
        ref: ${{ env.USE_QBT_REFS }}
        repository: ${{ github.repository_owner }}/SomePackages
        fetch-depth: 1
        token: ${{ secrets.SUPER_TOKEN }}
        path: qt_repo
    - name: Clone libt
      if: env.USE_LIBT_LOCAL != 'true'
      uses: actions/checkout@v3
      with:
        ref: ${{ env.USE_LIBT_REFS }}
        repository: ${{ github.repository_owner }}/SomePackages
        fetch-depth: 1
        token: ${{ secrets.SUPER_TOKEN }}
        path: libt_repo
    - name: Prepare required packages
      run: |
        bash ./auto-build/build_pre.sh "${{ matrix.qt }}" "${{ matrix.libtorrent }}" "${{ matrix.link }}"
    - name: Prepare building
      env:
        IGNORE_UPDATE_FEEDS: ${{ steps.cache-feeds.outputs.cache-hit }}
      working-directory: ./build
      run: |
        bash ../auto-build/build_conf.sh "${{ matrix.qt }}" "${{ matrix.link }}"
    - if: env.USE_LIBT_HASH == ''
      run: |
        echo USE_LIBT_HASH=$(sed -n 's/PKG_HASH:=\(\w\+\)/\1/gp' ./mirror/package/self/libtorrent-rasterbar/Makefile | head -c 10)" >> $GITHUB_ENV
    - run: |
        echo "USE_QT_VER=$(sed -n '/PKG_BASE:=/{N;s/PKG_BASE:=\([0-9.]\+\)\s\+PKG_BUGFIX:=\(\w\+\)/\1.\2/gp}' ./mirror/package/self/qtbase/Makefile)" >> $GITHUB_ENV
    - name: Cache downloaded source files (exclude Qt)
      id: cache-src
      uses: actions/cache@v3
      with:
        path: |
          build/dl/*
          !build/dl/qtbase-*.tar.xz
          !build/dl/qttools-*.tar.xz
        key: source-${{ matrix.link }}-${{ hashFiles(
             'build/package/self/**',
             '!build/package/self/libtorrent-rasterbar/**',
             '!build/package/self/qtbase/**',
             '!build/package/self/qttools/**',
             'build/feeds/base/package/libs/zlib/**',
             'build/feeds/packages/libs/boost/**',
             'build/feeds/base/package/libs/openssl/**',
             'build/feeds/packages/libs/pcre2/**'
             ) }}
        restore-keys: |
          source-${{ matrix.link }}-
          source-
    - run: |
        if [ -d 'build/dl' ]; then
        	ls -lha build/dl
        fi
    - name: Cache Qt source
      id: cache-qt
      uses: actions/cache@v3
      with:
        path: |
          build/dl/qtbase-*-src-${{ env.USE_QT_VER }}.tar.xz
          build/dl/qttools-*-src-${{ env.USE_QT_VER }}.tar.xz
        key: qt-${{ env.USE_QT_VER }}
    - run: |
        if [ -d 'build/dl' ]; then
        	ls -lha build/dl
        fi
    - name: Download pkgs
      if: ${{ steps.cache-src.outputs.cache-hit != 'true' || steps.cache-qt.outputs.cache-hit != 'true' }}
      working-directory: ./build
      run: |
        # Disable downloading default installed packages
        sed -i '/config \(DEFAULT_\|MODULE_DEFAULT_\|PACKAGE_\)/{:a;N;/\n$/!ba;/default \(y\|m\)/d}' Config-build.in

        make defconfig
        make package/download V=sc -j$(($(nproc)+1))
        make package/qttools/download V=sc -j$(($(nproc)+1))

        # Clean up the obsolete packages
        if [ ! -d "dl" ]; then
        	./scripts/dl_cleanup.py 2>&1 >/dev/null
        	rm -rf dl/libtorrent-rasterbar-*.tar.gz
        fi
    - run: |
        if [ -d 'build/dl' ]; then
        	ls -lha build/dl
        fi
    - name: Upload Env
      uses: actions/upload-artifact@v3
      with:
        name: env-${{ matrix.link }}-${{ matrix.qt }}-${{ matrix.libtorrent }}
        path: auto-build/env
  build-matrix:
    name: ${{ matrix.link }}, ${{ matrix.arch }}, qt${{ matrix.qt }}, libtorrent_${{ matrix.libtorrent }}
    needs: [build-prep, sdk-download, pkg-download]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-prep.outputs.matrix) }}
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v3
      with:
        path: auto-build
        persist-credentials: false
    - name: Install Dependencies
      run: |
        sudo -E apt update
        sudo -E apt -y install \
        	build-essential curl flex gawk git jq libncurses5-dev libssl-dev \
        	python3 python3-distutils xz-utils zlib1g-dev
    - name: Download arch depended env
      id: arch-depended-env
      uses: actions/download-artifact@v3
      with:
        name: env-${{ matrix.arch }}-${{ matrix.link }}
    - name: Initialize Arch Environment
      working-directory: ./auto-build
      env:
        env_path: ${{ steps.arch-depended-env.outputs.download-path }}
      run: |
        if [ -f "${env_path}/init_env" ]; then
        	cat ${env_path}/init_env >> $GITHUB_ENV
        else
        	exit 1
        fi
    - name: Download Env
      id: arch-independed-env
      uses: actions/download-artifact@v3
      with:
        name: env-${{ matrix.link }}-${{ matrix.qt }}-${{ matrix.libtorrent }}
    - name: Initialize Pkg Environment
      working-directory: ./auto-build
      env:
        env_path: ${{ steps.arch-independed-env.outputs.download-path }}
      run: |
        if [ -f "${env_path}/env" ]; then
        	cat ${env_path}//env >> $GITHUB_ENV
        else
        	exit 1
        fi

        # Common name of the saved files
        echo "SAVED_NAME=${{ matrix.arch }}-${{ matrix.link }}-qt${{ matrix.qt }}-libtorrent_${{ matrix.libtorrent }}" >> $GITHUB_ENV
    - name: Cache SDK
      uses: actions/cache@v3
      id: cache-sdk
      with:
        path: ./${{ env.USE_SDK_FILE }}
        key: ${{ matrix.link }}-${{ matrix.arch }}-${{ env.USE_SDK_VERSION }}
    - if: steps.cache-sdk.outputs.cache-hit != 'true'
      run: |
        curl -kLOZ --compressed ${{ env.USE_SOURCE_URL }}/${{ env.USE_SDK_FILE }}
        [ "$(sha256sum ${{ env.USE_SDK_FILE }} | cut -d ' ' -f1)" = "${{ env.USE_SDK_SHA256SUM }}" ] || exit 1;
    - run: |
        mkdir -p build
        XZ_OPT='-T0' tar -xJf "${USE_SDK_FILE}" --strip-components=1 -C build
    - name: Cache feeds
      id: cache-feeds
      uses: actions/cache@v3
      with:
        path: |
          build/feeds/*
        key: feeds-${{ matrix.link }}-${{ env.USE_FEEDS_VERSION }}
        restore-keys: |
          feeds-${{ matrix.link }}-
          feeds-
    - name: Clone qbt
      if: ${{ steps.cache-qbt.outputs.cache-hit != 'true' }}
      uses: actions/checkout@v3
      with:
        ref: ${{ env.USE_QBT_REFS }}
        repository: ${{ github.repository_owner }}/SomePackages
        fetch-depth: 1
        token: ${{ secrets.SUPER_TOKEN }}
        path: qt_repo
    - name: Clone libt
      if: env.USE_LIBT_LOCAL != 'true'
      uses: actions/checkout@v3
      with:
        ref: ${{ env.USE_LIBT_REFS }}
        repository: ${{ github.repository_owner }}/SomePackages
        fetch-depth: 1
        token: ${{ secrets.SUPER_TOKEN }}
        path: libt_repo
    - name: Prepare required packages
      run: |
        bash ./auto-build/build_pre.sh "${{ matrix.qt }}" "${{ matrix.libtorrent }}" "${{ matrix.link }}"
    - name: Prepare building
      env:
        IGNORE_UPDATE_FEEDS: ${{ steps.cache-feeds.outputs.cache-hit }}
      working-directory: ./build
      run: |
        bash ../auto-build/build_conf.sh "${{ matrix.qt }}" "${{ matrix.link }}"
    - if: env.USE_LIBT_HASH == ''
      run: |
        echo USE_LIBT_HASH=$(sed -n 's/PKG_HASH:=\(\w\+\)/\1/gp' ./mirror/package/self/libtorrent-rasterbar/Makefile | head -c 10)" >> $GITHUB_ENV
    - run: |
        echo "USE_QT_VER=$(sed -n '/PKG_BASE:=/{N;s/PKG_BASE:=\([0-9.]\+\)\s\+PKG_BUGFIX:=\(\w\+\)/\1.\2/gp}' ./mirror/package/self/qtbase/Makefile)" >> $GITHUB_ENV
    - name: Cache downloaded source files (exclude Qt)
      uses: actions/cache@v3
      with:
        path: |
          build/dl/*
          !build/dl/libtorrent-rasterbar-*.tar.gz
          !build/dl/qtbase-*.tar.xz
          !build/dl/qttools-*.tar.xz
        key: source-${{ matrix.link }}-${{ hashFiles(
             'build/package/self/**',
             '!build/package/self/qtbase/**',
             '!build/package/self/qttools/**',
             'build/feeds/base/package/libs/zlib/**',
             'build/feeds/packages/libs/boost/**',
             'build/feeds/base/package/libs/openssl/**',
             'build/feeds/packages/libs/pcre2/**'
             ) }}
        restore-keys: |
          source-${{ matrix.link }}-
          source-
    - run: |
        if [ -d 'build/dl' ]; then
        	ls -lha build/dl
        fi
    - name: Cache Qt source
      uses: actions/cache@v3
      with:
        path: |
          build/dl/qtbase-*-src-${{ env.USE_QT_VER }}.tar.xz
          build/dl/qttools-*-src-${{ env.USE_QT_VER }}.tar.xz
        key: qt-${{ env.USE_QT_VER }}
    - run: |
        if [ -d 'build/dl' ]; then
        	ls -lha build/dl
        fi
    - name: Cache binary
      if: (needs.build-prep.outputs.draft == 'success' || github.event.inputs.build == 'true')
      id: cache-bin
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.SAVED_NAME }}.tar.xz
          ${{ env.SAVED_NAME }}.log.tar.xz
        key: ${{ format('bin-{0}-{1}-{2}-{3}-{4}-{5}', env.USE_RELEASE_NUMBER, matrix.link, matrix.arch, env.USE_SDK_VERSION, env.USE_LIBT_HASH, 
             hashFiles(
             'build/package/self/**',
             'build/feeds/base/package/libs/zlib/**',
             'build/feeds/packages/libs/boost/**',
             'build/feeds/base/package/libs/openssl/**',
             'build/feeds/packages/libs/pcre2/**',
             'auto-build/build_conf.sh'
             )) }}
    - name: Build the Binary Files
      id: build-pkgs
      if: (needs.build-prep.outputs.draft == 'success' || github.event.inputs.build == 'true') && steps.cache-bin.outputs.cache-hit != 'true'
      working-directory: ./build
      run: |
        make defconfig
        make package/luci-app-qbittorrent/compile V=sc -j$(($(nproc)+1)) BUILD_LOG=1
    - name: Pack all the flies
      id: pack-all
      if: always()
      env:
        CACHE_HIT: ${{ steps.cache-bin.outputs.cache-hit }}
      run: |
        bash ./auto-build/pack_all.sh "${{ matrix.arch }}" "${{ matrix.link }}"
    - name: Upload Release Asset
      id: upload-release
      if: needs.build-prep.outputs.draft == 'success'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        [ -n "$(find ${SAVED_NAME} -type f -iname *qbittorrent*)" ] || exit 1
        cd auto-build
        hub release edit "${GITHUB_REF_NAME}" -a "../${SAVED_NAME}.tar.xz" -m ""
    - name: Upload the Pkgs
      if: always() && steps.upload-release.outcome != 'success' && steps.pack-all.outputs.pkgs == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.SAVED_NAME }}-pkgs
        path: ./${{ env.SAVED_NAME }}.tar.xz
        if-no-files-found: error
    - name: Upload the Logs
      if: always() && steps.pack-all.outputs.logs == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.SAVED_NAME }}-log
        path: |
          ./${{ env.SAVED_NAME }}.log.tar.xz
        if-no-files-found: error
    - name: Upload the sha256sum
      if: steps.pack-all.outputs.pkgs == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: sha256sum-${{ env.SAVED_NAME }}
        path: sha256sum-${{ env.SAVED_NAME }}
        if-no-files-found: error
  test-matrix:
    name: Run test on ${{ matrix.link }}, ${{ matrix.arch }}, qt${{ matrix.qt }}, libtorrent_${{ matrix.libtorrent }}
    needs: [build-prep, build-matrix]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-prep.outputs.matrix) }}
    steps:
    - name: Clone Current Repository
      if: matrix.runtime_test
      uses: actions/checkout@v3
      with:
        path: auto-build
        persist-credentials: false
    - name: Install Dependencies
      if: matrix.runtime_test
      run: |
        [ -n "$(command -v curl)" ] && [ -n "$(command -v jq)" ] && [ -n "$(command -v skopeo)" ] || {
        	sudo -E apt update
        	sudo -E apt -y install curl jq skopeo
        }
    - name: Initialize Env
      if: matrix.runtime_test
      run: |
        USE_TARGET=$(jq -r '.openwrt?."${{ matrix.arch }}"?.USE_TARGET'  ./auto-build/${{ matrix.link }}.json)
        RUN_ON_TARGET=$(jq -r '.openwrt?."${{ matrix.arch }}"?.RUN_ON_TARGET'  ./auto-build/${{ matrix.link }}.json)
        echo "RUN_ON_TARGET=$([ "$RUN_ON_TARGET" != "null" ] && echo $RUN_ON_TARGET || echo $USE_TARGET)" >> $GITHUB_ENV
        echo "SAVED_NAME=${{ matrix.arch }}-${{ matrix.link }}-qt${{ matrix.qt }}-libtorrent_${{ matrix.libtorrent }}" >> $GITHUB_ENV
        # Openwrt tag for docker image
        echo "USE_OPENWRT_BRANCH=openwrt-22.03" >> $GITHUB_ENV
        . $GITHUB_ENV

        # Get the docker image hash
        # library/busybox
        skopeo inspect --format "{{.Digest}}" docker://docker.io/busybox | cut -d : -f 2 | xargs -i echo "USE_BUSYBOX_HASH={}" >> $GITHUB_ENV || exit 1

        # multiarch/qemu-user-static
        token=$(curl -s "https://auth.docker.io/token?scope=repository:multiarch/qemu-user-static:pull&service=registry.docker.io" | jq -r '.token')
        curl -fskILZ -H "Accept: application/vnd.dockser.distribution.manifest.v2+json" \
        	-H "Authorization: Bearer ${token}" "https://registry-1.docker.io/v2/multiarch/qemu-user-static/manifests/latest" \
        	| sed -n 's/docker-content-digest:\s\+sha256:\(\w\+\)/\1/gp' | xargs -i echo "USE_DOCKER_HASH={}" >> $GITHUB_ENV || exit 1

        # openwrtorg/rootfs
        token=$(curl -s "https://auth.docker.io/token?scope=repository:openwrtorg/rootfs:pull&service=registry.docker.io" | jq -r '.token')
        curl -fskILZ -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
        	-H "Authorization: Bearer ${token}" "https://registry-1.docker.io/v2/openwrtorg/rootfs/manifests/${RUN_ON_TARGET:-${USE_TARGET}}-${USE_OPENWRT_BRANCH}" \
        	| sed -n 's/docker-content-digest:\s\+sha256:\(\w\+\)/\1/gp' | xargs -i echo "USE_ROOTFS_HASH={}" >> $GITHUB_ENV || exit 1
    - name: Download the Pkgs
      if: matrix.runtime_test
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.SAVED_NAME }}-pkgs
    - if: matrix.runtime_test
      run: tar -xvf ${SAVED_NAME}.tar.xz
    - name: Cache busybox
      if: matrix.runtime_test
      id: cache-busybox
      uses: actions/cache@v3
      with:
        path: ~/docker_images/busybox.tar
        key: docker-busybox-${{ env.USE_BUSYBOX_HASH }}
    - if: steps.cache-busybox.outputs.cache-hit == 'true'
      run: |
        docker load -i ~/docker_images/busybox.tar
    - if: matrix.runtime_test && steps.cache-busybox.cache-hit != 'true'
      run: |
        docker pull busybox:latest
        mkdir -p ~/docker_images
        docker save -o ~/docker_images/busybox.tar busybox:latest
    - name: Cache qemu-user-static
      if: matrix.runtime_test
      id: cache-qus
      uses: actions/cache@v3
      with:
        path: ~/docker_images/qus.tar
        key: docker-qus-${{ env.USE_DOCKER_HASH }}
    - if: steps.cache-qus.outputs.cache-hit == 'true'
      run: |
        docker load -i ~/docker_images/qus.tar
    - if: matrix.runtime_test && steps.cache-qus.outputs.cache-hit != 'true'
      run: |
        docker pull multiarch/qemu-user-static:latest
        mkdir -p ~/docker_images
        docker save -o ~/docker_images/qus.tar multiarch/qemu-user-static:latest
    - name: Cache rootfs
      if: matrix.runtime_test
      id: cache-rootfs
      uses: actions/cache@v3
      with:
        path: ~/docker_images/openwrt_rootfs.tar
        key: docker-${{ env.RUN_ON_TARGET }}-${{ env.USE_OPENWRT_BRANCH }}-${{ env.USE_ROOTFS_HASH }}
    - if: steps.cache-rootfs.outputs.cache-hit == 'true'
      run: |
        docker load -i ~/docker_images/openwrt_rootfs.tar
    - if: matrix.runtime_test && steps.cache-rootfs.outputs.cache-hit != 'true'
      run: |
        docker pull openwrtorg/rootfs:${RUN_ON_TARGET}-${USE_OPENWRT_BRANCH}
        mkdir -p ~/docker_images
        docker save -o ~/docker_images/openwrt_rootfs.tar openwrtorg/rootfs:${RUN_ON_TARGET}-${USE_OPENWRT_BRANCH}
    - name: Build Docker container
      id: build-docker
      if: matrix.runtime_test
      run: |
        # register
        docker build -t qemu-static ./auto-build/docker/qemu
        docker run --rm --privileged qemu-static --reset -p yes
        # rootfs
        docker build -t test-container --build-arg ARCH="${RUN_ON_TARGET}" --build-arg BRANCH="${USE_OPENWRT_BRANCH}" ./auto-build/docker/rootfs
    - name: Test via Docker container
      if: steps.build-docker.outcome == 'success'
      run: |
        host_port=28181
        request_url=http://127.0.0.1:${host_port}
        webui_port=8080
        webui_url=http://127.0.0.1:${webui_port}
        docker_id=$(docker run -d -p 127.0.0.1:${host_port}:${webui_port} --rm --mount type=bind,src=$GITHUB_WORKSPACE/${SAVED_NAME},dst=/ci test-container)
        end_time=$(($(date +%s) + 200))
        while [ "${end_time}" -gt "$(date +%s)" ]; do
        	if [ -n "$(docker ps -f id=${docker_id} -f status=running -q)" ]; then
        		[ -f "/tmp/openwrt-${docker_id}.log" ] || docker logs "${docker_id}" -t -f &> /tmp/openwrt-${docker_id}.log &
        		if [ -n "$(docker exec $docker_id netstat -ntul | grep ${webui_port})" ]; then
        			sid=$(curl -is -m 10 \
        				-H "Host: ${webui_url}" \
        				-d 'username=admin&password=adminadmin' \
        				${request_url}/api/v2/auth/login \
        				| grep '^set-cookie' | sed -n 's/\S\+ SID=\([^\x0-\x1f ",;\\\x7f]\+\); .*/\1/gp' 2>&1);
        			[ -z "$sid" ] || break;
        		fi

        		sleep 1
        	else
        		echo "::error::The docker is not running!"
        		exit 1
        	fi
        done
        printf "Startup delay: %ss\n" $((200 + $(date +%s) - ${end_time}))

        if [ -n "$(docker ps -f id=${docker_id} -f status=running -q)" ]; then
        	if [ -n "$sid" ]; then
        		echo "::group::qBittorrent info"
        		echo "-------------------------------------------"
        		curl -s -m 10 -H "Host: ${webui_url}" --cookie "SID=${sid}" ${request_url}/api/v2/app/version | xargs echo "qBittorrent:"
        		curl -s -m 10 -H "Host: ${webui_url}" --cookie "SID=${sid}" ${request_url}/api/v2/app/webapiVersion | xargs echo "WebAPI:"
        		echo "-------------------------------------------"
        		curl -s -m 10 -H "Host: ${webui_url}" --cookie "SID=${sid}" ${request_url}/api/v2/app/buildInfo | jq -r 'to_entries[] | "\(.key): \(.value)"'
        		curl -s -m 10 -X POST -H "Host: ${webui_url}" --cookie "SID=${sid}" ${request_url}/api/v2/app/shutdown
        		echo "::endgroup::"
        		end_time=$(($(date +%s) + 100))
        		while [ "${end_time}" -gt "$(date +%s)" ]; do
        			docker inspect ${docker_id} >> /dev/null 2>&1 && sleep 1 || break
        		done
        	else
        		docker kill ${docker_id}
        	fi
        fi

        if [ -f "/tmp/openwrt-${docker_id}.log" ]; then
        	echo "::group::Docker logs"
        	cat /tmp/openwrt-${docker_id}.log
        	echo "::endgroup::"
        fi

        [ -n "$sid" ] || { echo "Can't connect to qbittorrent!!!"; exit 1; }
  post-clean:
    needs: [build-prep, build-matrix]
    runs-on: ubuntu-latest
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v3
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    - run: |
        touch sha256sum
        find artifacts -type f -iname 'sha256sum-*' -exec cat {} >> sha256sum \;
    - name: Upload the sha256sum
      uses: actions/upload-artifact@v3
      with:
        name: sha256sum
        path: sha256sum
        if-no-files-found: error
    - uses: geekyeggo/delete-artifact@v2
      with:
        name: |
          env-*
          sha256sum-*
        failOnError: false
  pre-release:
    if: needs.build-prep.outputs.draft == 'success'
    needs: [build-prep, build-matrix, post-clean,test-matrix]
    runs-on: ubuntu-latest
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v3
    - name: Edit Release Status
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        hub release edit "${GITHUB_REF_NAME}" -p --draft=false -m ""
