name: CI

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v3
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.SUPER_TOKEN }}
      run: |
        tag_name=$(basename ${{github.ref}})
        hub release create -d -t master -m "Release $tag_name" $tag_name
  build_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v3
    - id: set-matrix
      run: |
        matrix=
        for json_file in ./*.json; do
        	libt_ver="$(jq -r .qbt.LIBTORRENT_VERSION[]? ${json_file})"
        	qt_ver="$(jq -r .qbt.QT_VERSION[]? ${json_file})"
        	json_file_name=$(basename $json_file)
        	link=${json_file_name%.*}
        	architectures=$(jq -r '.openwrt | to_entries[] | select((.value | type) == "object") | .key' ${json_file})
        	for arch in $architectures; do
        		if [ "$(jq -r '.openwrt["'$arch'"].RUN_SKIP? // false' ${json_file})" = "false" ]; then
        			runtime_test=$(jq -r '.openwrt["'$arch'"].RUNTIME_TEST? // false' ${json_file})
        			for libtorrent in ${libt_ver}; do
        				for qt in ${qt_ver}; do
        					[ -z "${matrix}" ] ||  matrix="${matrix},"
        					matrix="${matrix}{\"arch\":\"${arch}\",\"link\":\"${link}\",\"libtorrent\":\"${libtorrent}\",\"qt\":\"${qt}\",\"runtime_test\":${runtime_test}}"
        				done
        			done
        		fi
        	done
        done
        echo "::set-output name=matrix::{\"include\":[${matrix}]}"
  build-matrix:
    name: ${{matrix.link}}, ${{matrix.arch}}, qt${{matrix.qt}}, libtorrent_${{matrix.libtorrent}}
    needs: [create-release, build_prep]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build_prep.outputs.matrix) }}
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v3
      with:
        path: auto-build
    - name: Install Dependencies
      run: |
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential curl flex gawk git jq libelf-dev libncurses5-dev \
                           libssl-dev python python3 subversion time unzip wget xz-utils zlib1g-dev
    - name: Initialize Environment
      run: |
        JSON_FILE=auto-build/${{matrix.link}}.json

        for item in $(jq -r '.openwrt | keys[]' ${JSON_FILE}); do
        	if [ "$(jq -r '.openwrt["'$item'"] | type' ${JSON_FILE})" = "string" ]; then
        		eval ${item}=$(jq -r '.openwrt["'$item'"]' ${JSON_FILE})
        	fi
        done

        for option in $(jq -r '.openwrt["${{ matrix.arch }}"] | keys[]' ${JSON_FILE}); do
        	eval ${option}=$(jq -r '.openwrt["${{ matrix.arch }}"]["'$option'"]' ${JSON_FILE})
        done

        USE_SOURCE_URL=${USE_PROTOCOL}://${USE_DOMAIN}/${USE_RELEASE}
        SDK_FILE=openwrt-sdk

        if [ "${USE_RELEASE}" = "releases" ]; then
          USE_SOURCE_URL=${USE_SOURCE_URL}/${USE_VERSION}
          SDK_FILE=${SDK_FILE}-${USE_VERSION}
        fi

        USE_SOURCE_URL=${USE_SOURCE_URL}/targets/${USE_MAJOR_TARGET}/${USE_MINOR_TARGET}
        USE_TARGET=${USE_MAJOR_TARGET}$([ "${USE_UNIQUE}" = "true" ] || echo -${USE_MINOR_TARGET})
        USE_EXTENSION=$([ "${USE_EABI}" != "true" ] || echo _eabi)
        SDK_FILE=${SDK_FILE}-${USE_TARGET}_gcc-${USE_GCC}_${USE_LIBC:-musl}${USE_EXTENSION}.Linux-x86_64.tar.xz

        echo "RUN_ON_TARGET=${RUN_ON_TARGET:-${USE_TARGET}}" >> $GITHUB_ENV
        echo "USE_BRANCH=$(jq -r .qbt.USE_BRANCH ${JSON_FILE})" >> $GITHUB_ENV
        echo "USE_SDK_FILE=${SDK_FILE}" >> $GITHUB_ENV
        echo "USE_SOURCE_URL=${USE_SOURCE_URL}" >> $GITHUB_ENV
        echo "USE_TARGET=${USE_TARGET}" >> $GITHUB_ENV
    - name: Check Version
      run: |
        curl -O "${{env.USE_SOURCE_URL}}/version.buildinfo"
        curl -O "${{env.USE_SOURCE_URL}}/feeds.buildinfo"
        [ -e "version.buildinfo" ] && version="$(echo $(cat version.buildinfo))" || version="${{ github.run_id }}"
        [ -e "feeds.buildinfo" ] && feeds="$(echo $(md5sum feeds.buildinfo | cut -d ' ' -f 1))" || feeds="${{ github.run_id }}"
        echo "USE_SDK_VERSION=${version}" >> $GITHUB_ENV
        echo "USE_FEEDS_VERSION=${feeds}" >> $GITHUB_ENV
    - name: Cache SDK
      uses: actions/cache@v3
      id: cache-sdk
      with:
        path: ./${{ env.USE_SDK_FILE }}
        key: SDK-${{ matrix.arch }}-${{env.USE_TARGET}}-${{ env.USE_SDK_VERSION }}
    - if: steps.cache-sdk.outputs.cache-hit != 'true'
      run: |
        wget --no-check-certificate ${{ env.USE_SOURCE_URL }}/${{ env.USE_SDK_FILE }}
    - run: |
        tar -xJf ${{ env.USE_SDK_FILE }}
        find ./ -maxdepth 1 -type d -iname 'openwrt-sdk*' -exec mv {} build \;
        rm -rf build/dl build/feeds
    - name: Cache feeds and downloaded source files
      uses: actions/cache@v3
      with:
        path: |
          build/dl
          build/feeds
        key: source-${{matrix.link}}-${{ env.USE_FEEDS_VERSION }}
        restore-keys: |
          source-${{matrix.link}}-
          source-
    - name: Clone qbt
      uses: actions/checkout@v3
      with:
        ref: ${{env.USE_BRANCH}}
        repository: brvphoenix/SomePackages
        token: ${{ secrets.SUPER_TOKEN }}
        path: SomePackages
    - name: Build the Binary Files
      working-directory: ./build
      run: |
        # Restore the modified feeds sources
        for d in $([ -d feeds ] && ls feeds | cut -d . -f 1 | sort | uniq); do
        	cd feeds/$d;
        	git checkout .;
        	cd ../..;
        done

        mkdir -p package
        cp -r ../SomePackages/qbittorrent/luci-app-qbittorrent package
        cp -r ../SomePackages/qbittorrent/qt${{matrix.qt}}/* package
        # Use the libtorrent official latest commit
        # cp -r ../SomePackages/qbittorrent/libtorrent-rasterbar_${{matrix.libtorrent}}/* package
        cp -r ../auto-build/rsync/package/libtorrent-rasterbar_${{matrix.libtorrent}} package/libtorrent-rasterbar
        rm -r ../auto-build/rsync/package/libtorrent-rasterbar_*
        rsync -a ../auto-build/rsync/* ./

        # Compatible with libtorrent RC_1_2
        if [ "${{matrix.libtorrent}}" = "1_2" ] || [ "${{matrix.qt}}" = "5" ]; then
        	sed -i 's/\(target_link_libraries(qbt_app PUBLIC "\)/\1-liconv /g' package/qbittorrent/patches/0012-fix-static-compile.patch
        	sed -i 's/\(include \$(INCLUDE_DIR)\/cmake\.mk\)$/\1\ninclude \$(INCLUDE_DIR)\/nls\.mk/g' package/qbittorrent/Makefile
        fi
        # Make qmake compile in parallel (should be deleted when update to Qt6)
        mv ../auto-build/test.mk package/qtbase
        sed -i '/define Build\/Compile/i include ./test.mk' package/qtbase/Makefile

        # use the github source
        sed -i 's/git\.openwrt\.org\/openwrt\/openwrt/github\.com\/openwrt\/openwrt/g' ./feeds.conf.default
        sed -i 's/git\.openwrt\.org\/feed\/packages/github\.com\/openwrt\/packages/g' ./feeds.conf.default
        sed -i 's/git\.openwrt\.org\/project\/luci/github\.com\/openwrt\/luci/g' ./feeds.conf.default
        sed -i 's/git\.openwrt\.org\/feed\/telephony/github\.com\/openwrt\/telephony/g' ./feeds.conf.default

        # Use the stable release snapshot feeds sources (should upgrade if update the release version).
        [ "${{matrix.link}}" = "dynamic" ] && sed -i 's/\(\.git\)\^\w\+/\1\;openwrt-21.02/g' ./feeds.conf.default

        # Sync with the source
        ./scripts/feeds update -a
        rm -rf feeds/packages/libs/libtorrent-rasterbar

        ./scripts/feeds update -i
        ./scripts/feeds install -a

        cat > .config <<EOF
        # CONFIG_ALL_KMODS is not set
        # CONFIG_ALL is not set
        CONFIG_PACKAGE_luci-app-qbittorrent=y
        CONFIG_QBT_REMOVE_GUI_TR=y
        CONFIG_QBT_LANG-zh=y
        CONFIG_LUCI_LANG_zh_Hans=y
        EOF

        [ "${{matrix.link}}" = "static" ] && {
        	cat >> .config <<-EOF
        		CONFIG_PACKAGE_libpcre2-16=y
        		CONFIG_PACKAGE_boost=y
        		CONFIG_PACKAGE_boost-system=y
        		CONFIG_PACKAGE_libopenssl=y
        		CONFIG_QT${{matrix.qt}}_OPENSSL_LINKED=y
        		CONFIG_QT${{matrix.qt}}_STATIC=y
        		# CONFIG_QT${{matrix.qt}}_SYSTEM_DC is not set
        		CONFIG_QT${{matrix.qt}}_SYSTEM_PCRE2=y
        		CONFIG_QT${{matrix.qt}}_SYSTEM_ZLIB=y
        		CONFIG_QBT_STATIC_LINK=y
        	EOF

        	sed -i '/HOST_FPIC:=-fPIC/aFPIC:=-fPIC' rules.mk
        	sed -i 's/\(-DBUILD_SHARED_LIBS=\)ON/\1OFF/' feeds/packages/libs/pcre2/Makefile
        	sed -i '/(call BuildPackage,libpcre2)/i Package/libpcre2/install=true\nPackage/libpcre2-16/install=true\nPackage/libpcre2-32/install=true' feeds/packages/libs/pcre2/Makefile
        	sed -i 's/\(-DBUILD_SHARED_LIBS=\)ON/\1OFF/' package/libtorrent-rasterbar/Makefile
        	sed -i '/^define Package\/libtorrent-rasterbar$/{:a;N;/endef/!ba;s/\(endef\)/  BUILDONLY:=1\n\1/g}' package/libtorrent-rasterbar/Makefile
        }
        make defconfig
        make package/luci-app-qbittorrent/compile V=sc -j$(nproc) BUILD_LOG=1
    - name: Pack all the flies
      if: always()
      working-directory: ./build
      shell: bash
      run: |
        # Common name of the saved files
        SAVED_NAME=${{matrix.arch}}-${{matrix.link}}-qt${{matrix.qt}}-libtorrent_${{matrix.libtorrent}}

        # Compress the log files
        XZ_OPT=-9 tar -cJvf ../${SAVED_NAME}.log.tar.xz logs

        # The save path of the packages
        PKGS_DIR=${SAVED_NAME}/pkgs
        KEY_DIR=${SAVED_NAME}/key
        mkdir -p ${PKGS_DIR} ${KEY_DIR}

        if [ "${{matrix.link}}" = "static" ]; then
          find bin/packages -type f -iname *qbittorrent* -exec cp -f {} ${PKGS_DIR} \;
        else
          find bin/packages -type f \( \
            -iname libqt${{matrix.qt}}* -or \
            -iname  *torrent*.ipk -or \
            -iname libopenssl1* -or \
            -iname boost_* -or \
            -iname boost-system* -or \
            -iname libdouble-conversion* -or \
            -iname libpcre2-16* -or \
            -iname zlib_* \
          \) -exec cp -f {} ${PKGS_DIR} \;

          find bin/targets -type f \( \
            -iname libstdcpp* -or \
            -iname libatomic* \
          \) -exec cp -f {} ${PKGS_DIR} \;
        fi

        # Add to repository
        STAGING_DIR_HOST=$(pwd)/staging_dir/host
        SCRIPT_DIR=$(pwd)/scripts
        BUILD_KEY=qbt-key
        export MKHASH=${STAGING_DIR_HOST}/bin/mkhash
        export PATH=${STAGING_DIR_HOST}/bin:$PATH
        usign -G -s ${BUILD_KEY} -p ${BUILD_KEY}.pub -c "Local qbt build key"
        ucert -I -c ${BUILD_KEY}.ucert -p ${BUILD_KEY}.pub -s ${BUILD_KEY}

        fingerprint=$(usign -F -p ${BUILD_KEY}.pub)
        cp ${BUILD_KEY}.pub "${KEY_DIR}/$fingerprint"

        cd ${PKGS_DIR} && \
        	${SCRIPT_DIR}/ipkg-make-index.sh . > Packages &&  \
        	gzip -9nc Packages > Packages.gz
        cd "$(echo ${PKGS_DIR} | sed 's/^\///g' | sed 's/\// /g' | sed 's/\S\+/../g' | sed 's/ /\//g')"

        usign -S -m "${PKGS_DIR}/Packages" -s "${BUILD_KEY}"

        # Generate the install script
        cat > ${SAVED_NAME}/install.sh <<-EOF
        	#!/bin/sh
        	work_dir=\$(pwd)
        	script_dir="\$( cd "\$( dirname "\$0" )" && pwd )"

        	cd \${work_dir}

        	if [ -n "\$(opkg print-architecture | awk '{print \$2}' | grep '^${{ matrix.arch }}\$')" ]; then
        	$(echo -e "\t")add_arch=0
        	else
        	$(echo -e "\t")add_arch=1
        	$(echo -e "\t")sed -i "\\\$a# qbt add start\\\\n\$(opkg print-architecture | sed ':a;N;\$!ba;s/\n/\\\n/g')\\\\narch ${{ matrix.arch }} 1\\\\n# qbt add end" /etc/opkg.conf
        	fi

        	case "\$1" in
        	$(echo -e "\t")install)
        	$(echo -e "\t\t")cp \${script_dir}/key/$fingerprint /etc/opkg/keys
        	$(echo -e "\t\t")sed -i "\\\$asrc\\/gz openwrt_qbt file\\:\$(echo \${script_dir}/pkgs | sed 's/\//\\\\\//g')" /etc/opkg/customfeeds.conf

        	$(echo -e "\t\t")opkg print-architecture

        	$(echo -e "\t\t")mkdir -p /var/opkg-lists/
        	$(echo -e "\t\t")cp \${script_dir}/pkgs/Packages.gz /var/opkg-lists/openwrt_qbt
        	$(echo -e "\t\t")cp \${script_dir}/pkgs/Packages.sig /var/opkg-lists/openwrt_qbt.sig

        	$(echo -e "\t\t")opkg install luci-i18n-qbittorrent-zh-cn
        	$(echo -e "\t\t")sed -i "/src\\/gz openwrt_qbt file\\:\$(echo \${script_dir}/pkgs | sed 's/\//\\\\\//g')/d" /etc/opkg/customfeeds.conf
        	$(echo -e "\t\t")rm -rf /etc/opkg/keys/$fingerprint
        	$(echo -e "\t");;
        	$(echo -e "\t")remove)
        	$(echo -e "\t\t")opkg --force-removal-of-dependent-packages \$@
        	$(echo -e "\t");;
        	$(echo -e "\t")*)
        	$(echo -e "\t\t")echo "Usage:"
        	$(echo -e "\t\t")echo "	\$0 [sub-command]"
        	$(echo -e "\t\t")echo ""
        	$(echo -e "\t\t")echo "Commands:"
        	$(echo -e "\t\t")echo "	install			Install qbittorrent and its depends"
        	$(echo -e "\t\t")echo "	remove <pkgs>		Uninstall pkgs"
        	$(echo -e "\t\t")echo ""
        	$(echo -e "\t");;
        	esac

        	[ "\$add_arch" = 1 ] && sed -i '/# qbt add start/{:a;N;/# qbt add end/!ba;d}' /etc/opkg.conf || exit 0
        EOF

        # Compress the pkgs
        tar -cJf ../${SAVED_NAME}.tar.xz ${SAVED_NAME}

        # Compress and encrypt the keychain
        tar -czvf - ${BUILD_KEY}.ucert ${BUILD_KEY}.pub ${BUILD_KEY} | \
        openssl enc -aes-256-ctr -pbkdf2 -pass pass:${{ secrets.KEYCHAIN }} > ../${SAVED_NAME}-keychain.bin

        # openssl enc -d -aes-256-ctr -pbkdf2 -pass pass:123456 -in ../${SAVED_NAME}-keychain.bin  | tar -xz

        # Clean up the obsolete packages
        scripts/dl_cleanup.py dl 2>&1 >/dev/null
        rm -rf dl/libtorrent-rasterbar-RC_${{matrix.libtorrent}}.tar.gz

        echo "SAVED_NAME=${SAVED_NAME}" >> $GITHUB_ENV
    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.SUPER_TOKEN }}
      run: |
        [ -n "$(find build/${{ env.SAVED_NAME }} -type f -iname *qbittorrent*)" ] || exit 1
        tag_name=$(basename ${{github.ref}})
        cd auto-build
        hub release edit $tag_name -a ../${{ env.SAVED_NAME }}.tar.xz -m ""
        hub release edit $tag_name -a ../${{ env.SAVED_NAME }}-keychain.bin -m ""
    - name: Register QEMU
      if: ${{ matrix.runtime_test }}
      run: |
        sudo docker run --rm --privileged aptman/qus -s -- -p
    - name: Build Docker container
      if: ${{ matrix.runtime_test }}
      run: |
        sudo docker build -t test-container --build-arg ARCH=${{ env.RUN_ON_TARGET }} --build-arg BRANCH=21.02.1 ./auto-build/docker
    - name: Test via Docker container
      if: ${{ matrix.runtime_test }}
      run: |
        sudo docker run --rm -v $GITHUB_WORKSPACE/build/${{ env.SAVED_NAME }}:/ci test-container
    - name: Upload the Logs
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.SAVED_NAME }}-log
        path: ./${{ env.SAVED_NAME }}.log.tar.xz
        if-no-files-found: error
  pre-release:
    needs: [create-release, build-matrix]
    runs-on: ubuntu-latest
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v3
    - name: Edit Release Status
      env:
        GITHUB_TOKEN: ${{ secrets.SUPER_TOKEN }}
      run: |
        tag_name=$(basename ${{github.ref}})
        hub release edit $tag_name -p --draft=false -m ""
