name: CI

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      build:
        description: 'Building pkgs'
        required: true
        type: boolean
      type:
        description: 'Building type'
        required: true
        default: 'all'
        type: choice
        options:
        - dynamic
        - static
        - all
      arch:
        description: 'Architecture'
        required: true
        default: 'all'
        type: choice
        options:
        - aarch64
        - arm
        - x86
        - mips
        - powerpc
        - all
      qt:
        description: 'QT version'
        required: true
        default: 'all'
        type: choice
        options:
        - 5
        - 6
        - all
      lt:
        description: 'libtorrent branch'
        required: true
        default: 'all'
        type: choice
        options:
        - 1.2
        - 2.0
        - all

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}-${{ format('{0}-{1}-{2}-{3}', github.event.inputs.type, github.event.inputs.arch, github.event.inputs.qt, github.event.inputs.lt) }}
  cancel-in-progress: true

jobs:
  build-prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      draft: ${{ steps.create-draft.outcome }}
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        [ -n "$(command -v jq)" ] || {
        	sudo apt-get update
        	sudo apt-get -y install jq
        }
    - name: Format build matrix
      id: set-matrix
      env:
        inputs_type: ${{ github.event.inputs.type }}
        inputs_arch: ${{ github.event.inputs.arch }}
        inputs_qt: ${{ github.event.inputs.qt }}
        inputs_lt: ${{ github.event.inputs.lt }}
      run: |
        matrix='[]'
        for json_file in ./*.json; do
        	json_file_name=$(basename $json_file)
        	link=${json_file_name%.*}
        	[ -z "${inputs_type}" ] || [ "${inputs_type}" = "all" ] || [ "${inputs_type}" = "${link}" ] || continue;

        	matrix=$(jq -c --argjson mt "${matrix}" --arg lt "${inputs_lt/./_}" --arg qt "${inputs_qt}" --arg arch "${inputs_arch}" --arg link "${link}" '
        		foreach (.openwrt | (if (.RUN_SKIP? // false) then [] else . end) | to_entries | map(select((.value | type) == "object"))) as $item (
        			[{
        				libtorrent: .qbittorrent.LIBTORRENT_VERSION? | to_entries[]? | .key? | select($lt == "" or $lt == "all" or $lt == .),
        				qt: .qbittorrent.QT_VERSION? | to_entries[]? | .key? | select($qt == "" or $qt == "all" or $qt == .),
        				link: $link,
        				arch: .openwrt | to_entries[] | select((.value | type) == "object" and (.value?.RUN_SKIP? // false) != true) | .key | (
        					select($arch == "" or $arch == "all" or (split("_") | .[0]) == $arch or startswith("\($arch)el") or startswith("\($arch)eb"))
        				)
        			}];
        			map(select(.arch == $item[].key) | .arch as $target_arch | . += {runtime_test: $item[] | select(.key == $target_arch) | (.value?.RUNTIME_TEST? // false)});
        			.
        		) | . + $mt | unique | sort_by(.link + .arch)
        	' ${link}.json)
        done

        [ "${matrix}" != "[]" ] || exit 1
        echo "matrix={\"include\":${matrix}}" >> $GITHUB_OUTPUT
    - name: Create draft
      id: create-draft
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        [ "$(hub release --include-drafts | grep "${GITHUB_REF_NAME}" | wc -l)" -eq 0 ] || hub release delete "${GITHUB_REF_NAME}"
        hub release create -d -t master -m "Release ${GITHUB_REF_NAME}" "${GITHUB_REF_NAME}"
  build-matrix:
    name: ${{ matrix.link }}, ${{ matrix.arch }}, qt${{ matrix.qt }}, libtorrent_${{ matrix.libtorrent }}
    needs: build-prep
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-prep.outputs.matrix) }}
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v3
      with:
        path: auto-build
        persist-credentials: false
    - name: Install Dependencies
      run: |
        [ -n "$(command -v curl)" -a -n "$(command -v jq)" ] || {
          sudo apt-get update
          sudo apt-get -y install curl jq
        }
    - name: Initializing
      working-directory: ./auto-build
      run: |
        bash ./init_env.sh "${{ matrix.arch }}" "${{ matrix.link }}" "${{ matrix.qt }}" "${{ matrix.libtorrent }}"
    - name: Cache SDK
      uses: actions/cache@v3
      id: cache-sdk
      with:
        path: ./${{ env.USE_SDK_FILE }}
        key: ${{ matrix.link }}-${{ matrix.arch }}-${{ env.USE_OPENWRT_SRC_VERSION }}
    - if: steps.cache-sdk.outputs.cache-hit != 'true'
      run: curl -fkLOZ --compressed --connect-timeout 10 --retry 5 "${USE_SOURCE_URL}/${USE_SDK_FILE}"
    - run: |
        sha256sum --check --status ./auto-build/sdk.sha256sums || exit 1
        mkdir -p build
        XZ_OPT='-T0' tar -xJf "${USE_SDK_FILE}" --strip-components=1 -C build
    - name: Cache feeds
      id: cache-feeds
      uses: actions/cache@v3
      with:
        path: |
          build/feeds/*
        key: feeds-${{ matrix.link }}-${{ env.USE_FEEDS_REVISION }}
        restore-keys: |
          feeds-${{ matrix.link }}-
          feeds-
    - name: Clone qbittorrent
      uses: actions/checkout@v3
      with:
        ref: ${{ env.USE_QBT_REFS }}
        repository: ${{ github.repository_owner }}/SomePackages
        fetch-depth: 0
        token: ${{ secrets.SUPER_TOKEN }}
        path: qt_repo
    - name: Clone libtorrent
      if: env.USE_LIBT_LOCAL != 'true'
      uses: actions/checkout@v3
      with:
        ref: ${{ env.USE_LIBT_REFS }}
        repository: ${{ github.repository_owner }}/SomePackages
        fetch-depth: 1
        token: ${{ secrets.SUPER_TOKEN }}
        path: libt_repo
    - name: Prepare modified packages
      run: |
        bash ./auto-build/build_pre.sh "${{ matrix.qt }}" "${{ matrix.libtorrent }}" "${{ matrix.link }}"
    - name: Prepare building
      env:
        IGNORE_UPDATE_FEEDS: ${{ steps.cache-feeds.outputs.cache-hit }}
      working-directory: ./build
      run: |
        bash ../auto-build/build_conf.sh "${{ matrix.qt }}" "${{ matrix.libtorrent }}" "${{ matrix.link }}"
    - if: env.USE_LIBT_HASH == ''
      run: |
        echo USE_LIBT_HASH=$(sed -n 's/PKG_HASH:=\(\w\+\)/\1/gp' build/feeds/self/packages/libs/libtorrent-rasterbar/Makefile | head -c 10)" >> $GITHUB_ENV
    - name: Cache binary
      if: needs.build-prep.outputs.draft == 'success' || github.event.inputs.build == 'true'
      id: cache-bin
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.SAVED_NAME }}
          build/logs
        key: ${{ format('bin-{0}-{1}-{2}-{3}-{4}', matrix.link, matrix.arch, env.USE_OPENWRT_SRC_VERSION, env.USE_LIBT_HASH, env.USE_BINARY_HASH) }}
    - name: Cache downloaded source files (exclude Qt)
      if: (needs.build-prep.outputs.draft == 'success' || github.event.inputs.build == 'true') && steps.cache-bin.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      with:
        path: |
          build/dl/*
          !build/dl/libtorrent-rasterbar-*.tar.xz
          !build/dl/qtbase-*.tar.xz
          !build/dl/qttools-*.tar.xz
        key: source-${{ matrix.link }}-${{ env.USE_DL_HASH }}
        restore-keys: |
          source-${{ matrix.link }}-
          source-
    - if: (needs.build-prep.outputs.draft == 'success' || github.event.inputs.build == 'true') && steps.cache-bin.outputs.cache-hit != 'true'
      run: |
        echo "USE_QT_VER=$(sed -n '/PKG_BASE:=/{N;s/PKG_BASE:=\([0-9.]\+\)\s\+PKG_BUGFIX:=\(\w\+\)/\1.\2/gp}' build/feeds/self/packages/qt${{ matrix.qt }}/qtbase/Makefile)" >> $GITHUB_ENV
    - name: Cache Qt source
      if: env.USE_QT_VER != ''
      uses: actions/cache@v3
      with:
        path: |
          build/dl/qtbase-*-src-${{ env.USE_QT_VER }}.tar.xz
          build/dl/qttools-*-src-${{ env.USE_QT_VER }}.tar.xz
        key: qt-${{ env.USE_QT_VER }}
    - name: Build the Binary Files
      if: (needs.build-prep.outputs.draft == 'success' || github.event.inputs.build == 'true') && steps.cache-bin.outputs.cache-hit != 'true'
      working-directory: ./build
      run: |
        make defconfig
        make package/luci-app-qbittorrent/compile V=sc -j$(($(nproc)+1)) BUILD_LOG=1
    - name: Pack all the flies
      id: pack-all
      if: success() || failure()
      env:
        CACHE_HIT: ${{ steps.cache-bin.outputs.cache-hit }}
      run: |
        bash ./auto-build/pack_all.sh "${{ matrix.arch }}" "${{ matrix.link }}" "${{ matrix.libtorrent }}"
    - name: Upload Pkgs
      if: needs.build-prep.outputs.draft != 'true' && steps.pack-all.outputs.pkgs == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.SAVED_NAME }}-pkgs_${{ github.run_attempt }}
        path: ${{ env.SAVED_NAME }}.tar.xz
    - name: Upload sha256sums
      if: steps.pack-all.outputs.pkgs == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: sha256sum
        path: ${{ env.SAVED_NAME }}.sha256sum
    - name: Upload Logs
      if: (success() || failure()) && steps.pack-all.outputs.logs == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.SAVED_NAME }}-logs_${{ github.run_attempt }}
        path: ${{ env.SAVED_NAME }}.logs.tar.xz
    - name: Cache Custom rootfs
      if: matrix.runtime_test && env.USE_IMAGEBUILDER == 'true'
      uses: actions/cache@v3
      id: cache-rootfs-files
      with:
        path: auto-build/docker/custom/rootfs
        key: rootfs-${{ env.USE_DOCKER_ROOTFS_TAG }}-${{ env.USE_OPENWRT_SRC_VERSION }}
    - name: Cache ImageBuilder
      if: matrix.runtime_test && env.USE_IMAGEBUILDER == 'true' && steps.cache-rootfs-files.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      id: cache-ib
      with:
        path: ./${{ env.USE_IMAGEBUILDER_FILE }}
        key: IB-${{ matrix.arch }}-${{ env.USE_OPENWRT_SRC_VERSION }}
    - if: matrix.runtime_test && env.USE_IMAGEBUILDER == 'true' && steps.cache-rootfs-files.outputs.cache-hit != 'true' && steps.cache-ib.outputs.cache-hit != 'true'
      run: curl -fkLOZ --compressed --connect-timeout 10 --retry 5 "${USE_SOURCE_URL}/${USE_IMAGEBUILDER_FILE}"
    - if: matrix.runtime_test && env.USE_IMAGEBUILDER == 'true' && steps.cache-rootfs-files.outputs.cache-hit != 'true'
      run: |
        sha256sum --check --status ./auto-build/imagebuilder.sha256sums || exit 1
        mkdir -p imagebuilder
        XZ_OPT='-T0' tar -xJf "${USE_IMAGEBUILDER_FILE}" --strip-components=1 -C imagebuilder
    - if: matrix.runtime_test && env.USE_IMAGEBUILDER == 'true' && steps.cache-rootfs-files.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      with:
        path: ./imagebuilder/dl
        key: IB-dl-${{ matrix.arch }}-${{ env.USE_OPENWRT_SRC_VERSION }}
    - name: Generate custom rootfs docker
      if: matrix.runtime_test && env.USE_IMAGEBUILDER == 'true' && steps.cache-rootfs-files.outputs.cache-hit != 'true'
      working-directory: ./imagebuilder
      run: |
        mkdir -p tmp
        profile=$(make info | sed -n '/Available Profiles:/{:a;n;/^\w\+:/!ba;s/\(\w\+\):/\1/g;p}')
        set -- $(DEVICE_TYPE=basic make info | sed -n -e 's/Default Packages: \(.*\)$/\1/gp' -e '/^'${profile}':/{:a;n;/\s\+Packages:/!ba;s/.*Packages: \(.*\)/\1/g;p}')
        unset pkgs unselected
        for pkg in $@; do
        	[ "$pkg" = "procd" ] && { unselected=1; continue; } || true
        	[ "$unselected" != 1 ] || pkgs="${pkgs} $([[ "$pkg" == "-*" ]] || echo -)${pkg}"
        done

        echo "::group::Create rootfs"
        DEVICE_TYPE=basic make image PROFILE=${profile} PACKAGES="${pkgs}"
        echo "::endgroup::"
        find build_dir/target-* -mindepth 1 -maxdepth 1 -type d -iname "root-*" | xargs -i mv {} ../auto-build/docker/custom/rootfs
    - name: Build Custom Docker Container
      if: matrix.runtime_test && env.USE_IMAGEBUILDER == 'true'
      run: |
        cp ./auto-build/docker/rootfs/entrypoint.sh ./auto-build/docker/custom
        docker build -t test-container ./auto-build/docker/custom
    - name: Cache docker openwrt/rootfs
      if: matrix.runtime_test && env.USE_IMAGEBUILDER != 'true'
      id: cache-rootfs-docker
      uses: actions/cache@v3
      with:
        path: ~/docker_images/openwrt_rootfs.tar
        key: docker-${{ env.USE_DOCKER_ROOTFS_TAG }}-${{ env.USE_ROOTFS_HASH }}
    - if: steps.cache-rootfs-docker.outputs.cache-hit == 'true'
      run: |
        docker load -i ~/docker_images/openwrt_rootfs.tar
    - name: Build Docker Container
      id: build-docker
      if: matrix.runtime_test && env.USE_IMAGEBUILDER != 'true'
      run: |
        docker build -t test-container --build-arg TAG="${USE_DOCKER_ROOTFS_TAG}" ./auto-build/docker/rootfs
    - if: steps.build-docker.outcome == 'success' && steps.cache-rootfs-docker.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/docker_images
        docker save -o ~/docker_images/openwrt_rootfs.tar ghcr.io/openwrt/rootfs:${USE_DOCKER_ROOTFS_TAG}
    - name: Register QEMU
      if: matrix.runtime_test
      run: |
        [ -n "$(command -v update-binfmts)" ] || {
        	sudo apt-get update
        	sudo apt-get -y install binfmt-support
        }

        ## Update binfmts using ubuntu's binfmt files.
        #sudo update-binfmts --import

        mkdir -p qemu qemu/qus qemu/tmp
        cd qemu

        qus_ver=$(curl -fskLZ --compressed --fail-early \
        	https://metadata.ftp-master.debian.org/changelogs/main/q/qemu/experimental_changelog 2>&1 \
        	| head -n 1 | sed -n 's,qemu (\([0-9]:\)\?\(\S\+\)).*,\2,gp')
        curl -fkLOZ --compressed --connect-timeout 10 --retry 5 http://ftp.debian.org/debian/pool/main/q/qemu/qemu-user-static_${qus_ver}_amd64.deb
        dpkg -x "qemu-user-static_${qus_ver}_amd64.deb" "$(pwd)/qus"

        # Register qemu by official binfmt.
        exportdir=$(pwd)/tmp
        binfmt_ver=$(echo ${qus_ver} | sed -n 's,\(\([0-9]\+\.\)\+[0-9]\+\).*,\1,gp')
        curl -fkLOZ --compressed --connect-timeout 10 --retry 5 https://raw.githubusercontent.com/qemu/qemu/stable-${binfmt_ver}/scripts/qemu-binfmt-conf.sh
        chmod +x qemu-binfmt-conf.sh
        # Modify the package name to avoid potential conflits. For example, it need the modify the package name
        # to 'qemu-user-static' if use package 'qemu-user-static'.
        sed -i 's/^package qemu-\$cpu$/package qemu-test-static/g' qemu-binfmt-conf.sh
        ./qemu-binfmt-conf.sh --qemu-suffix "-static" --qemu-path "$(pwd)/qus/usr/bin" --debian --exportdir "${exportdir}" --persistent yes
        sudo update-binfmts --importdir ${exportdir} --import
    - name: Test via Docker container
      if: matrix.runtime_test
      run: |
        host_port=28181
        req_url=http://127.0.0.1:${host_port}
        webui_port=8080
        webui_url=http://127.0.0.1:${webui_port}
        docker_id=$(docker run -d -p 127.0.0.1:${host_port}:${webui_port} --env-file ${GITHUB_WORKSPACE}/docker_env --mount type=bind,src=$GITHUB_WORKSPACE/${SAVED_NAME},dst=/ci,readonly test-container)
        [ -n "${docker_id}" ] || { echo "::error::Can't startup the docker!"; exit 1; }
        end_time=$(($(date +%s) + 200))
        while [ "${end_time}" -gt "$(date +%s)" ]; do
        	if [ -n "$(docker ps -f id=${docker_id} -f status=running -q)" ]; then
        		if [ -n "$(docker exec $docker_id netstat -ntul | grep ${webui_port})" ]; then
        			sid=$(curl -is -m 10 \
        				-H "Host: ${webui_url}" \
        				-d 'username=admin&password=adminadmin' \
        				${req_url}/api/v2/auth/login \
        				| grep '^set-cookie' | sed -n 's/\S\+ SID=\([^\x0-\x1f ",;\\\x7f]\+\); .*/\1/gp' 2>&1);
        			[ -z "$sid" ] || break;
        		fi

        		sleep 1
        	else
        		echo "::error::The docker is not running!"
        		break
        	fi
        done
        printf "Startup delay: %ss\n" $((200 + $(date +%s) - ${end_time}))

        if [ -n "$(docker ps -f id=${docker_id} -f status=running -q)" ]; then
        	if [ -n "$sid" ]; then
        		echo "::group::qBittorrent info"
        		echo "-------------------------------------------"
        		curl -s -m 10 -H "Host: ${webui_url}" --cookie "SID=${sid}" ${req_url}/api/v2/app/version | xargs echo "qBittorrent:"
        		curl -s -m 10 -H "Host: ${webui_url}" --cookie "SID=${sid}" ${req_url}/api/v2/app/webapiVersion | xargs echo "WebAPI:"
        		echo "-------------------------------------------"
        		curl -s -m 10 -H "Host: ${webui_url}" --cookie "SID=${sid}" ${req_url}/api/v2/app/buildInfo | jq -r 'to_entries[] | "\(.key): \(.value)"'
        		echo "::endgroup::"
        		echo "::group::qBittorrent logs"
        		curl -s -m 10 -H "Host: ${webui_url}" --cookie "SID=${sid}" ${req_url}/api/v2/log/main?last_known_id=-1 | jq -r '.[] | "\(.timestamp | todate) \(.message)"'
        		echo "::endgroup::"
        		curl -s -m 10 -X POST -H "Host: ${webui_url}" --cookie "SID=${sid}" ${req_url}/api/v2/app/shutdown
        		end_time=$(($(date +%s) + 100))
        		while [ "${end_time}" -gt "$(date +%s)" ]; do
        			[ -n "$(docker ps -f id=${docker_id} -f status=running -q)" ] && sleep 1 || { err_code=0; break; }
        		done
        	else
        		echo "::error::Can't connect to qbittorrent!!!"
        	fi
        	[ -z "$(docker ps -f id=${docker_id} -f status=running -q)" ] || { echo "::warning::The docker will be forced to kill!"; docker kill ${docker_id}; }
        fi

        log_path=$(docker inspect --format {{.LogPath}} ${docker_id})
        [ -z "${log_path}" ] || {
        	echo "::group::Docker logs"
        	## keep six digits
        	#sudo jq -j '"\(.time | .[0:-1] | [.[0:19], (.[19:] | tonumber * 1e6 | round | tostring | until(length >= 6; "0" + .))] | join("."))Z \(.log)"' "${log_path}"
        	# Padding zero
        	sudo jq -j '"\(.time | .[0:-1] | until(length >= 29; . + "0"))Z \(.log)"' "${log_path}"
        	echo "::endgroup::"
        }
        docker rm -f "${docker_id}"

        exit ${err_code:-1}
    - name: Upload Release Asset
      id: upload-release
      if: needs.build-prep.outputs.draft == 'success' && steps.pack-all.outputs.pkgs == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        [ -n "$(find ${SAVED_NAME} -type f -iname *qbittorrent*)" ] || exit 1
        cd auto-build
        hub release edit "${GITHUB_REF_NAME}" -a "../${SAVED_NAME}.tar.xz" -m ""
  pre-release:
    if: needs.build-prep.outputs.draft == 'success'
    needs: [build-prep, build-matrix]
    runs-on: ubuntu-latest
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v3
    - name: Download the sha256sum
      uses: actions/download-artifact@v3
      with:
        name: sha256sum
        path: hash
    - name: Edit Release Status
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        touch sha256sum
        for sha256sum in hash/*.sha256sum; do
        	cat $sha256sum >> sha256sum
        done
        hub release edit "${GITHUB_REF_NAME}" -a sha256sum -m ""
        hub release edit "${GITHUB_REF_NAME}" -p --draft=false -m ""
