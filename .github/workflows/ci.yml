name: CI

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      build:
        description: 'Building pkgs'
        required: true
        type: boolean
      type:
        description: 'Building type'
        required: true
        default: 'all'
        type: choice
        options:
        - dynamic
        - static
        - all

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  build-prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      draft: ${{ steps.create-draft.outcome }}
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        [ -n "$(command -v jq)" ] || {
        	sudo -E apt update
        	sudo -E apt -y install jq
        }
    - name: Format build matrix
      id: set-matrix
      run: |
        matrix='[]'
        for json_file in ./*.json; do
        	json_file_name=$(basename $json_file)
        	link=${json_file_name%.*}
        	[ -z "${{ github.event.inputs.type }}" ] || [ "${{ github.event.inputs.type }}" = "all" ] || [ "${{ github.event.inputs.type }}" = "${link}" ] || continue;
        	[ "$(jq -r '.openwrt.RUN_SKIP? // false' ${json_file})" = "false" ] || continue;
        	for arch in $(jq -r '.openwrt | to_entries[] | select((.value | type) == "object") | .key' ${json_file}); do
        		[ "$(jq -r '.openwrt."'$arch'".RUN_SKIP? // false' ${json_file})" = "false" ] || continue;
        		runtime_test=$(jq -r '.openwrt."'$arch'".RUNTIME_TEST? // false' ${json_file})
        		for libtorrent in $(jq -r '.qbittorrent.LIBTORRENT_VERSION? | to_entries[]? | .key?' ${json_file}); do
        			for qt in $(jq -r '.qbittorrent.QT_VERSION? | to_entries[]? | .key?' ${json_file}); do
        				matrix="$(echo $matrix | jq -c '. += [{libtorrent:"'${libtorrent}'",qt:"'${qt}'",link:"'${link}'",arch:"'${arch}'",runtime_test:'${runtime_test}'}]')"
        			done
        		done
        	done
        done
        [ "${matrix}" != "[]" ] || exit 1
        echo "::set-output name=matrix::{\"include\":${matrix}}"
    - name: Create draft
      id: create-draft
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        [ "$(hub release --include-drafts | grep "${GITHUB_REF_NAME}" | wc -l)" -eq 0 ] || hub release delete "${GITHUB_REF_NAME}"
        hub release create -d -t master -m "Release ${GITHUB_REF_NAME}" "${GITHUB_REF_NAME}"
  build-matrix:
    name: ${{ matrix.link }}, ${{ matrix.arch }}, qt${{ matrix.qt }}, libtorrent_${{ matrix.libtorrent }}
    needs: build-prep
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-prep.outputs.matrix) }}
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v3
      with:
        path: auto-build
        persist-credentials: false
    - name: Install Dependencies
      run: |
        sudo -E apt update
        sudo -E apt -y install build-essential curl flex gawk git jq libncurses5-dev \
        			libssl-dev python3 python3-distutils time xz-utils zlib1g-dev
    - name: Initialize Environment
      working-directory: ./auto-build
      env:
        SUPER_TOKEN: ${{ secrets.SUPER_TOKEN }}
      run: |
        bash ./init_env.sh "${{ matrix.arch }}" "${{ matrix.link }}" "${{ matrix.qt }}" "${{ matrix.libtorrent }}"
    - name: Cache SDK
      uses: actions/cache@v3
      id: cache-sdk
      with:
        path: ./${{ env.USE_SDK_FILE }}
        key: ${{ matrix.link }}-${{ matrix.arch }}-${{ env.USE_SDK_VERSION }}
    - if: steps.cache-sdk.outputs.cache-hit != 'true'
      run: curl -kLOZ --compressed ${{ env.USE_SOURCE_URL }}/${{ env.USE_SDK_FILE }}
    - run: |
        [ "$(sha256sum ${{ env.USE_SDK_FILE }} | cut -d ' ' -f1)" = "${{ env.USE_SDK_SHA256SUM }}" ] || exit 1;
        mkdir -p build
        tar -xJf ${{ env.USE_SDK_FILE }} --strip-components=1 -C build
        rm -rf build/dl build/feeds
    - name: Clone qbt
      uses: actions/checkout@v3
      with:
        ref: ${{ env.USE_QBT_HASH }}
        repository: ${{ github.repository_owner }}/SomePackages
        fetch-depth: 1
        token: ${{ secrets.SUPER_TOKEN }}
        path: qt_repo
    - name: Clone libt
      if: fromJson(env.USE_UPSTREAM_LIBT)
      uses: actions/checkout@v3
      with:
        ref: ${{ env.USE_LIBT_HASH }}
        repository: ${{ github.repository_owner }}/SomePackages
        fetch-depth: 1
        token: ${{ secrets.SUPER_TOKEN }}
        path: libt_repo
    - run: |
        echo "USE_QT_VER=$(sed -n '/PKG_BASE:=/{N;s/PKG_BASE:=\([0-9.]\+\)\s\+PKG_BUGFIX:=\(\w\+\)/\1.\2/gp}' qt_repo/qbittorrent/qtbase/Makefile)" >> $GITHUB_ENV
    - name: Cache feeds and downloaded source files (exclude Qt source)
      uses: actions/cache@v3
      with:
        path: |
          build/dl/*
          build/feeds/*
          !build/dl/qtbase-*.tar.xz
          !build/dl/qttools-*.tar.xz
        key: source-${{ matrix.link }}${{ env.USE_FEEDS_VERSION }}-${{ hashFiles('auto-build/rsync/common/**', format('auto-build/rsync/{0}/**', matrix.link), '!auto-build/rsync/common/package/self/libtorrent-rasterbar_*') }}
        restore-keys: |
          source-${{ matrix.link }}${{ env.USE_FEEDS_VERSION }}-
          source-${{ matrix.link }}
          source-
    - name: Cache Qt source
      uses: actions/cache@v3
      with:
        path: |
          build/dl/qtbase-*-src-${{ env.USE_QT_VER }}.tar.xz
          build/dl/qttools-*-src-${{ env.USE_QT_VER }}.tar.xz
        key: qt-${{ env.USE_QT_VER }}
    - name: Building preparation
      working-directory: ./build
      run: |
        bash ../auto-build/build_pre.sh "${{ matrix.qt }}" "${{ matrix.libtorrent }}" "${{ matrix.link }}"
    - name: Cache binary
      if: needs.build-prep.outputs.draft == 'success' || github.event.inputs.build == 'true'
      id: cache-bin
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.SAVED_NAME }}.tar.xz
          ${{ env.SAVED_NAME }}.log.tar.xz
          ${{ env.SAVED_NAME }}-keychain.bin
        key: binary-${{ env.USE_RELEASE_NUMBER }}-${{ matrix.link }}-${{ matrix.arch }}-${{ env.USE_SDK_VERSION }}${{ env.USE_FEEDS_VERSION }}-${{ env.USE_LIBT_HASH }}-${{ hashFiles('mirror/**') }}
    - name: Build the Binary Files
      id: build-pkgs
      if: (needs.build-prep.outputs.draft == 'success' || github.event.inputs.build == 'true') && steps.cache-bin.outputs.cache-hit != 'true'
      working-directory: ./build
      run: |
        bash ../auto-build/build_conf.sh "${{ matrix.qt }}" "${{ matrix.link }}"

        make defconfig
        make package/luci-app-qbittorrent/compile V=sc -j$(($(nproc)+1)) BUILD_LOG=1
    - name: Pack all the flies
      id: pack-all
      if: always()
      env:
        KEYCHAIN_SECRET: ${{ secrets.KEYCHAIN }}
        CACHE_HIT: ${{ steps.cache-bin.outputs.cache-hit }}
      run: |
        bash ./auto-build/pack_all.sh "${{ matrix.arch }}" "${{ matrix.link }}"
    - name: Upload Release Asset
      id: upload-release
      if: needs.build-prep.outputs.draft == 'success'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        [ -n "$(find ${{ env.SAVED_NAME }} -type f -iname *qbittorrent*)" ] || exit 1
        cd auto-build
        hub release edit "${GITHUB_REF_NAME}" -a ../${{ env.SAVED_NAME }}.tar.xz -m ""
        hub release edit "${GITHUB_REF_NAME}" -a ../${{ env.SAVED_NAME }}-keychain.bin -m ""
    - name: Upload the Pkgs
      if: always() && steps.upload-release.outcome != 'success' && steps.pack-all.outputs.pkgs == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.SAVED_NAME }}-pkgs-${{ steps.pack-all.outputs.hash }}
        path: ./${{ env.SAVED_NAME }}.tar.xz
        if-no-files-found: error
    - name: Upload the Logs
      if: always() && steps.pack-all.outputs.logs == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.SAVED_NAME }}-log-${{ steps.pack-all.outputs.hash }}
        path: |
          ./${{ env.SAVED_NAME }}.log.tar.xz
          ${{ env.SAVED_NAME }}-keychain.bin
        if-no-files-found: error
    - name: Cache image aptman
      if: matrix.runtime_test && (steps.build-pkgs.outcome == 'success' || steps.cache-bin.outputs.cache-hit == 'true')
      id: cache-aptman
      uses: actions/cache@v3
      with:
        path: ~/docker_images/aptman_qus.tar
        key: docker-${{ env.USE_DOCKER_HASH }}
    - name: Cache docker image
      if: matrix.runtime_test && (steps.build-pkgs.outcome == 'success' || steps.cache-bin.outputs.cache-hit == 'true')
      id: cache-docker
      uses: actions/cache@v3
      with:
        path: ~/docker_images/test_docker.tar
        key: docker-${{ env.RUN_ON_TARGET }}-${{ hashFiles('auto-build/docker/**') }}
    - if: matrix.runtime_test && steps.cache-aptman.outputs.cache-hit != 'true' && (steps.build-pkgs.outcome == 'success' || steps.cache-bin.outputs.cache-hit == 'true')
      run: |
        docker pull aptman/qus
        mkdir -p ~/docker_images
        docker save -o ~/docker_images/aptman_qus.tar aptman/qus
    - if: steps.cache-aptman.outputs.cache-hit == 'true'
      run: |
        docker load -i ~/docker_images/aptman_qus.tar
    - if: steps.cache-docker.outputs.cache-hit == 'true'
      run: |
        docker load -i ~/docker_images/test_docker.tar
    - name: Register QEMU
      if: matrix.runtime_test && (steps.build-pkgs.outcome == 'success' || steps.cache-bin.outputs.cache-hit == 'true')
      run: |
        docker run --rm --privileged aptman/qus -s -- -p
    - name: Build Docker container
      id: build-docker
      if: matrix.runtime_test && steps.cache-docker.outputs.cache-hit != 'true' && (steps.build-pkgs.outcome == 'success' || steps.cache-bin.outputs.cache-hit == 'true')
      run: |
        docker build -t test-container --build-arg ARCH=${{ env.RUN_ON_TARGET }} --build-arg BRANCH=openwrt-21.02 ./auto-build/docker
        mkdir -p ~/docker_images
        docker save -o ~/docker_images/test_docker.tar test-container
    - name: Test via Docker container
      if: matrix.runtime_test && (steps.cache-docker.outputs.cache-hit == 'true' || steps.build-docker.outcome == 'success')
      run: |
        docker run --rm -v $GITHUB_WORKSPACE/${{ env.SAVED_NAME }}:/ci test-container
  pre-release:
    if: needs.build-prep.outputs.draft == 'success'
    needs: [build-prep, build-matrix]
    runs-on: ubuntu-latest
    steps:
    - name: Clone Current Repository
      uses: actions/checkout@v3
    - name: Edit Release Status
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        hub release edit "${GITHUB_REF_NAME}" -p --draft=false -m ""
